{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyNA+npJK/V4bIG2Wb58Kn0W",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ashish-Patnaik/-Student-Management-System/blob/main/new%20strategy\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5X5moQwrOrpp",
        "outputId": "0c351ebf-1a1f-408b-9df2-bf82aa1ee267"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Starting environment setup...\n",
            "Downgrading NumPy to 1.26.4...\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m61.0/61.0 kB\u001b[0m \u001b[31m11.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m18.3/18.3 MB\u001b[0m \u001b[31m50.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hNumPy downgrade attempt complete.\n",
            "\n",
            "!!! IMPORTANT !!!\n",
            "NumPy has been downgraded. For changes to take effect and to avoid 'numpy.dtype size changed' errors,\n",
            "the Colab runtime MUST BE RESTARTED now. After restarting, please run this cell again.\n",
            "If you see this message, the cell execution will stop here. After restart, it will proceed.\n",
            "\n",
            "Runtime restarted successfully. Proceeding with other installations...\n",
            "Uninstalling pandas, pyarrow, lightgbm, scikit-learn, alpaca-py to ensure clean install...\n",
            "\u001b[33mWARNING: Skipping yfinance as it is not installed.\u001b[0m\u001b[33m\n",
            "\u001b[0mInstalling pinned versions of Pandas (2.0.3) and PyArrow (14.0.1)...\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.2/12.2 MB\u001b[0m \u001b[31m180.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "mlxtend 0.23.4 requires scikit-learn>=1.3.1, which is not installed.\n",
            "bigframes 2.4.0 requires pyarrow>=15.0.2, which is not installed.\n",
            "pandas-gbq 0.28.1 requires pyarrow>=4.0.0, which is not installed.\n",
            "bigquery-magics 0.9.0 requires pyarrow>=3.0.0, which is not installed.\n",
            "dask-expr 1.1.21 requires pyarrow>=14.0.1, which is not installed.\n",
            "shap 0.47.2 requires scikit-learn, which is not installed.\n",
            "fastai 2.7.19 requires scikit-learn, which is not installed.\n",
            "cudf-cu12 25.2.1 requires pyarrow<20.0.0a0,>=14.0.0; platform_machine == \"x86_64\", which is not installed.\n",
            "libpysal 4.13.0 requires scikit-learn>=1.1, which is not installed.\n",
            "datasets 2.14.4 requires pyarrow>=8.0.0, which is not installed.\n",
            "tsfresh 0.21.0 requires scikit-learn>=0.22.0, which is not installed.\n",
            "sklearn-pandas 2.2.0 requires scikit-learn>=0.23.0, which is not installed.\n",
            "db-dtypes 1.4.3 requires pyarrow>=13.0.0, which is not installed.\n",
            "google-colab 1.0.0 requires pandas==2.2.2, but you have pandas 2.0.3 which is incompatible.\n",
            "mizani 0.13.5 requires pandas>=2.2.0, but you have pandas 2.0.3 which is incompatible.\n",
            "xarray 2025.3.1 requires pandas>=2.1, but you have pandas 2.0.3 which is incompatible.\n",
            "plotnine 0.14.5 requires pandas>=2.2.0, but you have pandas 2.0.3 which is incompatible.\u001b[0m\u001b[31m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m38.0/38.0 MB\u001b[0m \u001b[31m255.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "bigframes 2.4.0 requires pyarrow>=15.0.2, but you have pyarrow 14.0.1 which is incompatible.\u001b[0m\u001b[31m\n",
            "\u001b[0mInstalling Alpaca-py, LightGBM, and scikit-learn...\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m121.7/121.7 kB\u001b[0m \u001b[31m5.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.6/3.6 MB\u001b[0m \u001b[31m53.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.5/13.5 MB\u001b[0m \u001b[31m205.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h\n",
            "--- Environment Setup Complete ---\n",
            "Verifying critical library versions...\n",
            "\n",
            "ERROR during import verification in Cell 1: No module named 'alpaca_trade_api'\n",
            "One of the core libraries failed to import. Please check pip logs above.\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "\n",
        "print(\"Starting environment setup...\")\n",
        "\n",
        "# IMPORTANT: Attempting to handle the 'numpy.dtype size changed' issue\n",
        "# This error typically occurs when NumPy is downgraded and other libraries\n",
        "# compiled against a newer NumPy are already loaded.\n",
        "# The best approach is to ensure NumPy is installed FIRST and then\n",
        "# restart the runtime before installing other dependencies.\n",
        "\n",
        "# 1. Downgrade NumPy (Crucial for your specified compatibility)\n",
        "print(\"Downgrading NumPy to 1.26.4...\")\n",
        "# --no-deps is important here to prevent pip from trying to install\n",
        "# other packages that depend on a newer numpy during this step.\n",
        "!pip install numpy==1.26.4 --force-reinstall --no-cache-dir -q --no-deps\n",
        "!pip install optuna -q\n",
        "print(\"NumPy downgrade attempt complete.\")\n",
        "\n",
        "# 2. Force Restart Runtime\n",
        "# This is CRUCIAL to ensure that the new NumPy version is loaded correctly\n",
        "# by all subsequent installations and imports.\n",
        "print(\"\\n!!! IMPORTANT !!!\")\n",
        "print(\"NumPy has been downgraded. For changes to take effect and to avoid 'numpy.dtype size changed' errors,\")\n",
        "print(\"the Colab runtime MUST BE RESTARTED now. After restarting, please run this cell again.\")\n",
        "print(\"If you see this message, the cell execution will stop here. After restart, it will proceed.\")\n",
        "\n",
        "# A common way to restart the runtime in Colab is to raise an exception or use exit()\n",
        "# However, for a programmatic restart that allows the cell to re-run,\n",
        "# we need to be careful. A simpler approach is to detect if it's the first run\n",
        "# and then prompt for manual restart, or use IPython.display.\n",
        "try:\n",
        "    # Check if a restart has already happened by checking an env var\n",
        "    if os.environ.get('RESTART_AFTER_NUMPY_DOWNGRADE', '0') == '0':\n",
        "        os.environ['RESTART_AFTER_NUMPY_DOWNGRADE'] = '1' # Set flag\n",
        "        # If this is the first run where numpy is downgraded, exit to prompt restart.\n",
        "        # This will raise an error, but it's intentional to stop execution.\n",
        "        raise RuntimeError(\"Please restart the Colab runtime (Runtime -> Restart session or Ctrl+M .) then run this cell again.\")\n",
        "except RuntimeError as e:\n",
        "    # If the flag was set, it means we've restarted, so continue\n",
        "    if os.environ.get('RESTART_AFTER_NUMPY_DOWNGRADE', '0') == '1' and \"Please restart\" in str(e):\n",
        "        print(\"\\nRuntime restarted successfully. Proceeding with other installations...\")\n",
        "    else:\n",
        "        # Re-raise the error if it's not the intended restart prompt\n",
        "        raise\n",
        "\n",
        "# If we reach here, it means either:\n",
        "# 1. It's the first run, and the user needs to restart (handled by the RuntimeError above)\n",
        "# 2. It's the second run after a restart, and the environment variable is set.\n",
        "\n",
        "# 3. Uninstall potentially conflicting libraries\n",
        "print(\"Uninstalling pandas, pyarrow, lightgbm, scikit-learn, alpaca-py to ensure clean install...\")\n",
        "# Use -y to answer yes to prompts, -q for quiet.\n",
        "# It's better to uninstall *before* installing specific versions to avoid conflicts.\n",
        "!pip uninstall -y pandas pyarrow lightgbm scikit-learn alpaca-py yfinance -q\n",
        "\n",
        "# 4. Install specific versions of Pandas and PyArrow, then others including alpaca-py\n",
        "print(\"Installing pinned versions of Pandas (2.0.3) and PyArrow (14.0.1)...\")\n",
        "# Install pandas first, then pyarrow, then others that depend on them.\n",
        "# The --no-deps flag is NOT used here as we want their dependencies resolved.\n",
        "!pip install pandas==2.0.3 --no-cache-dir -q\n",
        "!pip install pyarrow==14.0.1 --no-cache-dir -q\n",
        "\n",
        "print(\"Installing Alpaca-py, LightGBM, and scikit-learn...\")\n",
        "# Let pip resolve dependencies for these, but prefer the installed pandas/pyarrow.\n",
        "# Use --upgrade to ensure they are updated to compatible versions if already present.\n",
        "!pip install alpaca-py lightgbm scikit-learn --no-cache-dir -q\n",
        "\n",
        "print(\"\\n--- Environment Setup Complete ---\")\n",
        "print(\"Verifying critical library versions...\")\n",
        "try:\n",
        "    import numpy\n",
        "    import pandas\n",
        "    import pyarrow\n",
        "    import sklearn\n",
        "    import lightgbm\n",
        "    import alpaca_trade_api # alpaca-py installs as alpaca_trade_api\n",
        "    # If using newer alpaca-py, it might just be 'alpaca'. Check their docs.\n",
        "    # From your error, it seems 'alpaca' was used in the verification. Let's try both.\n",
        "    try:\n",
        "        import alpaca\n",
        "        alpaca_version = alpaca.__version__\n",
        "    except ImportError:\n",
        "        alpaca_version = alpaca_trade_api.__version__\n",
        "    except AttributeError: # Some modules might not have __version__ directly\n",
        "        alpaca_version = \"version not found (alpaca_trade_api)\"\n",
        "\n",
        "\n",
        "    print(f\"  NumPy version: {numpy.__version__} (EXPECTING 1.26.4)\")\n",
        "    print(f\"  Pandas version: {pandas.__version__} (EXPECTING 2.0.3)\")\n",
        "    print(f\"  PyArrow version: {pyarrow.__version__} (EXPECTING 14.0.1)\")\n",
        "    print(f\"  Scikit-learn version: {sklearn.__version__}\")\n",
        "    print(f\"  LightGBM version: {lightgbm.__version__}\")\n",
        "    print(f\"  Alpaca-py library imported successfully (version: {alpaca_version}).\")\n",
        "\n",
        "    # Add specific checks for exact versions if crucial, otherwise minor mismatches are okay\n",
        "    if not numpy.__version__.startswith(\"1.26.4\"): # Strict check\n",
        "        print(f\"\\nWARNING: NumPy is version {numpy.__version__}, not exactly 1.26.4 as intended.\")\n",
        "    if not pandas.__version__ == \"2.0.3\":\n",
        "        print(f\"\\nWARNING: Pandas is version {pandas.__version__}, not exactly 2.0.3 as intended.\")\n",
        "    if not pyarrow.__version__ == \"14.0.1\":\n",
        "        print(f\"\\nWARNING: PyArrow is version {pyarrow.__version__}, not exactly 14.0.1 as intended.\")\n",
        "\n",
        "    print(\"\\nCore library versions look OK based on current installations.\")\n",
        "    print(\"You can now proceed to Cell 2 (Main Imports).\")\n",
        "\n",
        "except ImportError as e:\n",
        "    print(f\"\\nERROR during import verification in Cell 1: {e}\")\n",
        "    print(\"One of the core libraries failed to import. Please check pip logs above.\")\n",
        "except Exception as e_gen:\n",
        "    print(f\"\\nAn unexpected error occurred during verification in Cell 1: {e_gen}\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import time\n",
        "from datetime import datetime, timedelta, timezone\n",
        "import pytz\n",
        "import os\n",
        "import logging # For better logging\n",
        "\n",
        "# Alpaca SDK\n",
        "from alpaca.data.historical import StockHistoricalDataClient\n",
        "from alpaca.data.requests import StockBarsRequest\n",
        "from alpaca.data.timeframe import TimeFrame, TimeFrameUnit\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, f1_score\n",
        "import lightgbm as lgb\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import joblib\n",
        "\n",
        "# --- Alpaca API Credentials & Client ---\n",
        "ALPACA_API_KEY = \"PKG1D7XBRNLFO6MXPBQ0\"  # <--- IMPORTANT: REPLACE WITH YOUR KEY\n",
        "ALPACA_API_SECRET = \"syf4d0pRkZ8CUVBj855xseYdiihezIFDXrgnHf65\"  # <--- IMPORTANT: REPLACE WITH YOUR SECRET\n",
        "\n",
        "stock_data_client = None\n",
        "try:\n",
        "    if ALPACA_API_KEY == \"YOUR_ALPACA_API_KEY\" or ALPACA_API_SECRET == \"YOUR_ALPACA_API_SECRET\":\n",
        "        print(\"WARNING: Alpaca API credentials are placeholders. Please update them.\")\n",
        "    stock_data_client = StockHistoricalDataClient(ALPACA_API_KEY, ALPACA_API_SECRET)\n",
        "    print(\"Alpaca StockHistoricalDataClient initialized successfully.\")\n",
        "except Exception as e:\n",
        "    print(f\"Failed to initialize Alpaca client: {e}. Ensure API keys are correct.\")\n",
        "\n",
        "# --- Configure Logging ---\n",
        "logger = logging.getLogger()\n",
        "if not logger.hasHandlers(): # Avoid adding multiple handlers if re-running cell\n",
        "    handler = logging.StreamHandler()\n",
        "    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n",
        "    handler.setFormatter(formatter)\n",
        "    logger.addHandler(handler)\n",
        "logger.setLevel(logging.INFO) # Set to DEBUG for more verbose output if needed\n",
        "\n",
        "# --- Global Constants for Feature Engineering & Labeling ---\n",
        "# Defined here to be accessible by both Cell 4 (training) and Cell 6 (strategy)\n",
        "RSI_PERIOD_G = 14\n",
        "MACD_FAST_G = 12\n",
        "MACD_SLOW_G = 26\n",
        "MACD_SIGNAL_G = 9\n",
        "ATR_PERIOD_G = 14\n",
        "ADX_PERIOD_G = 14\n",
        "CCI_PERIOD_G = 20\n",
        "LOOKBACK_HIGH_PERIOD_G = 55\n",
        "VOLUME_AVG_PERIOD_G = 50\n",
        "\n",
        "# Labeling Parameters (used in Cell 4 for training data generation)\n",
        "PROFIT_TARGET_PCT_G = 0.010\n",
        "STOP_LOSS_PCT_G = 0.0075\n",
        "LOOK_FORWARD_BARS_G = 10\n",
        "\n",
        "# Context Feature Parameters (used in Cell 4 for training, and Cell 6 for strategy consistency)\n",
        "SECTOR_MA_PERIOD_G = 50\n",
        "VIX_PROXY_THRESHOLD_HIGH_G = 20 # Example for VIXY, adjust based on VIXY's typical range\n",
        "VIX_PROXY_MA_PERIOD_G = 10\n",
        "\n",
        "NY_TZ = pytz.timezone('America/New_York')\n",
        "\n",
        "print(\"Cell 2: Main program imports, client init, and global constants defined.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "87YT8nEHO6u_",
        "outputId": "dba67cb4-33f2-45ca-a5b1-81f2d197eb1a"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Alpaca StockHistoricalDataClient initialized successfully.\n",
            "Cell 2: Main program imports, client init, and global constants defined.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ensure stock_data_client is initialized from Cell 2\n",
        "if 'stock_data_client' not in globals() or stock_data_client is None:\n",
        "    logger.critical(\"Alpaca stock_data_client not initialized. Run Cell 1 (Env Setup + RESTART) & Cell 2 (Imports & Client Init) again.\")\n",
        "    if 'ALPACA_API_KEY' in globals() and 'ALPACA_API_SECRET' in globals() and ALPACA_API_KEY != \"YOUR_ALPACA_API_KEY\":\n",
        "        try:\n",
        "            stock_data_client = StockHistoricalDataClient(ALPACA_API_KEY, ALPACA_API_SECRET)\n",
        "            logger.info(\"Re-initialized Alpaca StockHistoricalDataClient in Cell 3.\")\n",
        "        except Exception as e_client_reinit:\n",
        "            logger.error(f\"Failed to re-initialize Alpaca client in Cell 3: {e_client_reinit}\")\n",
        "            raise SystemExit(\"Halting due to Alpaca client issue.\")\n",
        "    else:\n",
        "        raise SystemExit(\"Alpaca credentials missing or are placeholders. Halting.\")\n",
        "\n",
        "# --- Configuration ---\n",
        "TRADING_SYMBOLS = ['AAPL', 'MSFT', 'GOOGL', 'NVDA', 'JPM', 'V', 'TSLA'] # Diversified sample\n",
        "SECTOR_ETF_MAP = {\n",
        "    'AAPL': 'XLK', 'MSFT': 'XLK', 'GOOGL': 'XLK', 'NVDA': 'SOXX', # SOXX for semis\n",
        "    'JPM': 'XLF', 'V': 'XLF', # Financials\n",
        "    'TSLA': 'XLY' # Consumer Discretionary\n",
        "}\n",
        "# Ensure all sector ETFs are unique and valid\n",
        "ALL_SECTOR_ETFS = list(set(s for s in SECTOR_ETF_MAP.values() if s is not None))\n",
        "\n",
        "VIX_PROXY_TICKER = 'VIXY' # Using VIXY ETF as a proxy for VIX, fetched from Alpaca\n",
        "\n",
        "ALL_SYMBOLS_TO_DOWNLOAD_ALPACA = list(set(TRADING_SYMBOLS + ALL_SECTOR_ETFS + [VIX_PROXY_TICKER]))\n",
        "ALL_SYMBOLS_TO_DOWNLOAD_ALPACA = [s for s in ALL_SYMBOLS_TO_DOWNLOAD_ALPACA if s is not None]\n",
        "\n",
        "\n",
        "HOURLY_TIMEFRAME_ALPACA = TimeFrame.Hour\n",
        "DAILY_TIMEFRAME_ALPACA = TimeFrame.Day\n",
        "\n",
        "# Adjusted end_date to something more recent for potentially more relevant data\n",
        "end_date_naive = datetime.strptime('2024-06-01', '%Y-%m-%d') # More recent data\n",
        "END_DATETIME_API = NY_TZ.localize(end_date_naive).replace(hour=23, minute=59, second=59)\n",
        "# Fetch history: 3 years for hourly, extend start for daily VIXY if needed for MAs\n",
        "START_DATETIME_HOURLY_API = END_DATETIME_API - timedelta(days=3*365)\n",
        "START_DATETIME_DAILY_API = END_DATETIME_API - timedelta(days=3*365 + 90) # Extra buffer for VIXY daily MAs\n",
        "\n",
        "logger.info(f\"Requesting Alpaca data for symbols: {', '.join(ALL_SYMBOLS_TO_DOWNLOAD_ALPACA)}\")\n",
        "logger.info(f\"Hourly API date range: {START_DATETIME_HOURLY_API.isoformat()} to {END_DATETIME_API.isoformat()}\")\n",
        "logger.info(f\"Daily API date range (for VIXY): {START_DATETIME_DAILY_API.isoformat()} to {END_DATETIME_API.isoformat()}\")\n",
        "\n",
        "# Model Training Parameters (already in Cell 2, reiterating for clarity of this cell's scope)\n",
        "TEST_SIZE_RATIO = 0.2\n",
        "RANDOM_STATE = 42\n",
        "\n",
        "# --- Data Download Function for Alpaca ---\n",
        "def download_alpaca_data_generic(symbols_or_symbol, start_dt, end_dt, timeframe, client, label=\"Data\"):\n",
        "    if not symbols_or_symbol: return {} if isinstance(symbols_or_symbol, list) else pd.DataFrame()\n",
        "\n",
        "    is_list_input = isinstance(symbols_or_symbol, list)\n",
        "    request_symbols = symbols_or_symbol if is_list_input else [symbols_or_symbol]\n",
        "    if not request_symbols: return {} if is_list_input else pd.DataFrame()\n",
        "\n",
        "    all_dfs = {}\n",
        "    logger.info(f\"Fetching Alpaca {label} for: {', '.join(request_symbols)} (Timeframe: {timeframe})...\")\n",
        "\n",
        "    # Alpaca API has a limit of 100 symbols per request for bars\n",
        "    chunk_size = 100\n",
        "    for i in range(0, len(request_symbols), chunk_size):\n",
        "        chunk_symbols = request_symbols[i:i+chunk_size]\n",
        "        request_params = StockBarsRequest(\n",
        "            symbol_or_symbols=chunk_symbols,\n",
        "            timeframe=timeframe,\n",
        "            start=start_dt,\n",
        "            end=end_dt,\n",
        "            adjustment='all', # Use 'raw' if you prefer, 'all' includes splits/dividends\n",
        "            feed='iex' # Use 'sip' if you have a paid plan and need more coverage, 'iex' for free\n",
        "        )\n",
        "        try:\n",
        "            bars_response = client.get_stock_bars(request_params)\n",
        "            if bars_response and bars_response.data:\n",
        "                for symbol_fetched in chunk_symbols:\n",
        "                    if symbol_fetched in bars_response.data:\n",
        "                        symbol_bars_data = bars_response.data[symbol_fetched]\n",
        "                        if symbol_bars_data:\n",
        "                            records = [{'timestamp': bar.timestamp, 'open': bar.open, 'high': bar.high, 'low': bar.low, 'close': bar.close, 'volume': bar.volume} for bar in symbol_bars_data]\n",
        "                            df = pd.DataFrame.from_records(records)\n",
        "                            if df.empty: continue\n",
        "                            df = df.set_index('timestamp')\n",
        "                            df.index = pd.to_datetime(df.index, utc=True).tz_convert(NY_TZ) # Ensure NY TZ\n",
        "\n",
        "                            cols_to_convert = ['open', 'high', 'low', 'close', 'volume']\n",
        "                            for col in cols_to_convert: df[col] = pd.to_numeric(df[col], errors='coerce')\n",
        "\n",
        "                            df = df[['open', 'high', 'low', 'close', 'volume']].copy() # Select and copy\n",
        "                            df.dropna(subset=['open', 'high', 'low', 'close'], inplace=True) # Drop if essential OHLC are NaN\n",
        "                            if not df.empty:\n",
        "                                all_dfs[symbol_fetched] = df\n",
        "                                logger.debug(f\"  Processed {len(df)} bars for {symbol_fetched} ({label}).\")\n",
        "            # else: logger.warning(f\"No data or empty response from Alpaca for {label} chunk: {', '.join(chunk_symbols)}.\")\n",
        "        except Exception as e:\n",
        "            logger.error(f\"Error during Alpaca {label} fetch for {', '.join(chunk_symbols)}: {e}\")\n",
        "            import traceback\n",
        "            traceback.print_exc()\n",
        "        time.sleep(0.2) # Minor delay to respect rate limits if fetching many chunks\n",
        "\n",
        "    logger.info(f\"Alpaca {label} fetch: Got data for {len(all_dfs)}/{len(request_symbols)} requested symbols.\")\n",
        "\n",
        "    if not is_list_input and request_symbols[0] in all_dfs:\n",
        "        return all_dfs[request_symbols[0]]\n",
        "    elif not is_list_input:\n",
        "        return pd.DataFrame()\n",
        "    return all_dfs\n",
        "\n",
        "# --- Main Data Download ---\n",
        "all_market_data_raw = {}\n",
        "\n",
        "# Download HOURLY data for TRADING_SYMBOLS and SECTOR_ETFs\n",
        "hourly_symbols_to_fetch = list(set(TRADING_SYMBOLS + ALL_SECTOR_ETFS))\n",
        "if stock_data_client and hourly_symbols_to_fetch:\n",
        "    hourly_data_fetched = download_alpaca_data_generic(hourly_symbols_to_fetch, START_DATETIME_HOURLY_API, END_DATETIME_API, HOURLY_TIMEFRAME_ALPACA, stock_data_client, \"Hourly Data\")\n",
        "    all_market_data_raw.update(hourly_data_fetched)\n",
        "    logger.info(f\"Alpaca hourly symbols fetched: {list(hourly_data_fetched.keys())}\")\n",
        "else:\n",
        "    logger.warning(\"Skipping Alpaca hourly download (client not init or no symbols).\")\n",
        "\n",
        "# Download DAILY data for VIX_PROXY_TICKER\n",
        "if stock_data_client and VIX_PROXY_TICKER:\n",
        "    vix_proxy_df_raw = download_alpaca_data_generic(VIX_PROXY_TICKER, START_DATETIME_DAILY_API, END_DATETIME_API, DAILY_TIMEFRAME_ALPACA, stock_data_client, \"VIX Proxy Daily Data\")\n",
        "    if not vix_proxy_df_raw.empty:\n",
        "        all_market_data_raw[VIX_PROXY_TICKER] = vix_proxy_df_raw\n",
        "        logger.info(f\"VIX Proxy data ({VIX_PROXY_TICKER}) downloaded: {len(vix_proxy_df_raw)} rows.\")\n",
        "    else:\n",
        "        logger.warning(f\"Could not download VIX Proxy data ({VIX_PROXY_TICKER}) from Alpaca. VIX filter/features will be affected.\")\n",
        "else:\n",
        "    logger.warning(\"Skipping VIX Proxy download (client not init or no ticker).\")\n",
        "\n",
        "\n",
        "# --- Data Alignment ---\n",
        "logger.info(\"\\n--- Starting Data Alignment ---\")\n",
        "aligned_market_data = {}\n",
        "master_index = None\n",
        "\n",
        "# Create master index from TRADING_SYMBOLS hourly data\n",
        "temp_indices = []\n",
        "for sym in TRADING_SYMBOLS:\n",
        "    if sym in all_market_data_raw and not all_market_data_raw[sym].empty:\n",
        "        # Filter for the common hourly range for master index creation\n",
        "        df_sym_filtered = all_market_data_raw[sym][(all_market_data_raw[sym].index >= START_DATETIME_HOURLY_API) &\n",
        "                                                   (all_market_data_raw[sym].index <= END_DATETIME_API)]\n",
        "        if not df_sym_filtered.empty:\n",
        "            temp_indices.append(df_sym_filtered.index)\n",
        "\n",
        "if temp_indices:\n",
        "    # Union of all trading symbol indices to get all possible hourly timestamps\n",
        "    master_index = temp_indices[0]\n",
        "    for idx in temp_indices[1:]:\n",
        "        master_index = master_index.union(idx)\n",
        "    master_index = master_index.sort_values()\n",
        "    logger.info(f\"Created master hourly index from trading symbols ({len(master_index)} timestamps).\")\n",
        "    logger.info(f\"Master index ranges from {master_index.min()} to {master_index.max()}\")\n",
        "else:\n",
        "    logger.critical(\"No trading symbols had sufficient data to create a master index. Halting.\")\n",
        "    raise SystemExit(\"Master index creation failed.\")\n",
        "\n",
        "# Align all data to the master_index\n",
        "for symbol, df_original in all_market_data_raw.items():\n",
        "    if df_original.empty:\n",
        "        logger.warning(f\"Skipping alignment for {symbol} (raw data empty).\")\n",
        "        # Create an empty DF with the master index for completeness if needed later, though it might be dropped\n",
        "        aligned_market_data[symbol] = pd.DataFrame(index=master_index, columns=['open','high','low','close','volume'])\n",
        "        continue\n",
        "\n",
        "    logger.debug(f\"Aligning data for {symbol}...\")\n",
        "    # Ensure original df index is NY_TZ (should be from download)\n",
        "    if df_original.index.tz is None or df_original.index.tz.zone != NY_TZ.zone:\n",
        "         df_original.index = pd.to_datetime(df_original.index, utc=True).tz_convert(NY_TZ)\n",
        "\n",
        "    # Reindex to the master_index\n",
        "    if symbol == VIX_PROXY_TICKER: # VIXY is daily, ffill onto hourly master index\n",
        "        aligned_df = df_original.reindex(master_index, method='ffill')\n",
        "    elif symbol in ALL_SECTOR_ETFS: # Sector ETFs are hourly, ffill for minor misalignments\n",
        "        aligned_df = df_original.reindex(master_index, method='ffill') # Using ffill for ETFs too\n",
        "    else: # Trading symbols - prefer exact match, ffill only small gaps\n",
        "        aligned_df = df_original.reindex(master_index)\n",
        "        aligned_df.ffill(limit=2, inplace=True) # Limit ffill to 2 hours for trading symbols\n",
        "\n",
        "    # For TRADING_SYMBOLS, 'close' must exist after alignment for them to be useful\n",
        "    if symbol in TRADING_SYMBOLS:\n",
        "        if 'close' not in aligned_df.columns or aligned_df['close'].isnull().all():\n",
        "            logger.warning(f\"Aligned data for TRADING SYMBOL {symbol} has no 'close' data or all NaNs. It will be unusable.\")\n",
        "            aligned_market_data[symbol] = pd.DataFrame(index=master_index, columns=['open','high','low','close','volume']) # Mark as empty effectively\n",
        "            continue\n",
        "        # Drop rows where essential 'close' is NaN for trading symbols (after ffill)\n",
        "        aligned_df.dropna(subset=['close'], inplace=True)\n",
        "        if aligned_df.empty :\n",
        "             logger.warning(f\"TRADING SYMBOL {symbol} became empty after dropping NaN 'close' post-alignment.\")\n",
        "\n",
        "    aligned_market_data[symbol] = aligned_df\n",
        "    if not aligned_df.empty:\n",
        "        logger.debug(f\"  Successfully aligned data for {symbol}: {len(aligned_df)} bars.\")\n",
        "    elif symbol in TRADING_SYMBOLS:\n",
        "        logger.warning(f\"  WARNING: No aligned data for TRADING SYMBOL {symbol}.\")\n",
        "\n",
        "logger.info(\"\\n--- Data Download and Alignment Process Complete ---\")\n",
        "if not aligned_market_data:\n",
        "    logger.critical(\"`aligned_market_data` dictionary is empty.\")\n",
        "else:\n",
        "    logger.info(f\"Keys in aligned_market_data: {list(aligned_market_data.keys())}\")\n",
        "    for sym_check in TRADING_SYMBOLS: # Check crucial trading symbols\n",
        "        if sym_check not in aligned_market_data or aligned_market_data[sym_check].empty:\n",
        "            logger.error(f\"  FINAL CRITICAL WARNING: Data for TRADING SYMBOL {sym_check} is MISSING or EMPTY in aligned_market_data.\")\n",
        "        elif 'close' in aligned_market_data[sym_check].columns and aligned_market_data[sym_check]['close'].isnull().sum() > 0.1 * len(aligned_market_data[sym_check]): # If more than 10% NaNs\n",
        "             logger.warning(f\"  FINAL WARNING: Significant NaNs found in 'close' column for TRADING SYMBOL {sym_check} AFTER alignment ({aligned_market_data[sym_check]['close'].isnull().sum()} NaNs).\")\n",
        "        elif sym_check in aligned_market_data:\n",
        "             logger.info(f\"  Data for TRADING SYMBOL {sym_check} looks OK in aligned_market_data ({len(aligned_market_data[sym_check])} rows).\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5ip2eLnsQlZA",
        "outputId": "fa1eb6ec-1111-47cc-96ce-4269f5f6b6ca"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:root:Requesting Alpaca data for symbols: XLK, SOXX, AAPL, VIXY, V, TSLA, JPM, XLY, MSFT, XLF, GOOGL, NVDA\n",
            "INFO:root:Hourly API date range: 2021-06-02T23:59:59-04:00 to 2024-06-01T23:59:59-04:00\n",
            "INFO:root:Daily API date range (for VIXY): 2021-03-04T23:59:59-04:00 to 2024-06-01T23:59:59-04:00\n",
            "INFO:root:Fetching Alpaca Hourly Data for: XLK, SOXX, AAPL, V, TSLA, JPM, XLY, MSFT, XLF, GOOGL, NVDA (Timeframe: 1Hour)...\n",
            "INFO:root:Alpaca Hourly Data fetch: Got data for 11/11 requested symbols.\n",
            "INFO:root:Alpaca hourly symbols fetched: ['XLK', 'SOXX', 'AAPL', 'V', 'TSLA', 'JPM', 'XLY', 'MSFT', 'XLF', 'GOOGL', 'NVDA']\n",
            "INFO:root:Fetching Alpaca VIX Proxy Daily Data for: VIXY (Timeframe: 1Day)...\n",
            "INFO:root:Alpaca VIX Proxy Daily Data fetch: Got data for 1/1 requested symbols.\n",
            "INFO:root:VIX Proxy data (VIXY) downloaded: 816 rows.\n",
            "INFO:root:\n",
            "--- Starting Data Alignment ---\n",
            "INFO:root:Created master hourly index from trading symbols (5989 timestamps).\n",
            "INFO:root:Master index ranges from 2021-06-03 08:00:00-04:00 to 2024-05-31 16:00:00-04:00\n",
            "INFO:root:\n",
            "--- Data Download and Alignment Process Complete ---\n",
            "INFO:root:Keys in aligned_market_data: ['XLK', 'SOXX', 'AAPL', 'V', 'TSLA', 'JPM', 'XLY', 'MSFT', 'XLF', 'GOOGL', 'NVDA', 'VIXY']\n",
            "INFO:root:  Data for TRADING SYMBOL AAPL looks OK in aligned_market_data (5989 rows).\n",
            "INFO:root:  Data for TRADING SYMBOL MSFT looks OK in aligned_market_data (5988 rows).\n",
            "INFO:root:  Data for TRADING SYMBOL GOOGL looks OK in aligned_market_data (5988 rows).\n",
            "INFO:root:  Data for TRADING SYMBOL NVDA looks OK in aligned_market_data (5988 rows).\n",
            "INFO:root:  Data for TRADING SYMBOL JPM looks OK in aligned_market_data (5974 rows).\n",
            "INFO:root:  Data for TRADING SYMBOL V looks OK in aligned_market_data (5970 rows).\n",
            "INFO:root:  Data for TRADING SYMBOL TSLA looks OK in aligned_market_data (5989 rows).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- EWM Helper Function (defined here, uses pandas from Cell 2) ---\n",
        "def EWM_pandas_global(series, span, min_periods=0):\n",
        "    \"\"\"Helper for Exponentially Weighted Moving Average using pandas\"\"\"\n",
        "    numeric_series = pd.to_numeric(series, errors='coerce')\n",
        "    # For EWM, min_periods should be at least 1 if span > 0 to avoid all NaNs initially\n",
        "    actual_min_periods = max(1, int(min_periods)) if span > 0 else int(min_periods)\n",
        "    return numeric_series.ewm(span=span, adjust=False, min_periods=actual_min_periods).mean()\n",
        "\n",
        "# --- Main Feature Engineering Function (uses global constants from Cell 2) ---\n",
        "def calculate_manual_features_enhanced(df_stock_in, df_sector_aligned, df_vix_proxy_aligned,\n",
        "                                       calculate_labels=True): # Flag to control label generation\n",
        "    \"\"\"\n",
        "    Calculates features for a stock DataFrame, incorporating aligned sector and VIX proxy data.\n",
        "    Uses global parameters like RSI_PERIOD_G, SECTOR_MA_PERIOD_G, etc. from Cell 2.\n",
        "    If calculate_labels is False, it skips the label generation part (for prediction).\n",
        "    \"\"\"\n",
        "    if df_stock_in is None or df_stock_in.empty:\n",
        "        logger.warning(\"Input stock DataFrame is empty in calculate_manual_features_enhanced.\")\n",
        "        return pd.DataFrame()\n",
        "\n",
        "    df = df_stock_in.copy()\n",
        "\n",
        "    required_stock_cols = ['open', 'high', 'low', 'close', 'volume']\n",
        "    if not all(col in df.columns for col in required_stock_cols):\n",
        "        logger.error(f\"Stock data missing one of required columns: {required_stock_cols}. Has: {df.columns.tolist()}\")\n",
        "        return pd.DataFrame()\n",
        "    for col in required_stock_cols: # Ensure numeric, coerce errors to NaN\n",
        "        df[col] = pd.to_numeric(df[col], errors='coerce')\n",
        "\n",
        "    # Drop rows if essential OHLCV data is NaN after coercion\n",
        "    # Important: This drop is for the stock's own data quality for feature calculation\n",
        "    df.dropna(subset=required_stock_cols, inplace=True)\n",
        "    if df.empty:\n",
        "        logger.warning(\"Stock DataFrame became empty after coercing and dropping NaNs from OHLCV.\")\n",
        "        return pd.DataFrame()\n",
        "\n",
        "    # --- Stock Features ---\n",
        "    df['returns_1'] = df['close'].pct_change(1)\n",
        "    df['returns_5'] = df['close'].pct_change(5)\n",
        "    df['returns_24'] = df['close'].pct_change(24) # Approx 1 day for hourly\n",
        "\n",
        "    df['high_lookback'] = df['high'].rolling(window=LOOKBACK_HIGH_PERIOD_G, min_periods=max(1, LOOKBACK_HIGH_PERIOD_G // 2)).max().shift(1)\n",
        "    df['volume_avg_lookback'] = df['volume'].rolling(window=VOLUME_AVG_PERIOD_G, min_periods=max(1, VOLUME_AVG_PERIOD_G // 2)).mean().shift(1)\n",
        "\n",
        "    # Breakout candidate needs valid high_lookback and volume_avg_lookback\n",
        "    df['is_breakout_candidate'] = 0 # Default to 0\n",
        "    valid_breakout_conditions = (~df['high_lookback'].isnull()) & \\\n",
        "                                (~df['volume_avg_lookback'].isnull()) & \\\n",
        "                                (df['volume_avg_lookback'] > 0) # Avoid division by zero or NaN issues\n",
        "\n",
        "    df.loc[valid_breakout_conditions, 'is_breakout_candidate'] = \\\n",
        "        ((df.loc[valid_breakout_conditions, 'close'] > df.loc[valid_breakout_conditions, 'high_lookback']) & \\\n",
        "         (df.loc[valid_breakout_conditions, 'volume'] > 1.5 * df.loc[valid_breakout_conditions, 'volume_avg_lookback'])).astype(int)\n",
        "\n",
        "\n",
        "    delta = df['close'].diff()\n",
        "    gain = delta.where(delta > 0, 0.0)\n",
        "    loss = -delta.where(delta < 0, 0.0) # Note: loss is positive here\n",
        "\n",
        "    avg_gain = EWM_pandas_global(gain, span=RSI_PERIOD_G*2-1 if RSI_PERIOD_G > 0 else 1, min_periods=RSI_PERIOD_G)\n",
        "    avg_loss = EWM_pandas_global(loss, span=RSI_PERIOD_G*2-1 if RSI_PERIOD_G > 0 else 1, min_periods=RSI_PERIOD_G)\n",
        "\n",
        "    # Prevent division by zero for rs\n",
        "    rs_denominator = avg_loss.replace(0, 1e-9) + 1e-9\n",
        "    rs = avg_gain / rs_denominator\n",
        "    df['rsi'] = 100.0 - (100.0 / (1.0 + rs))\n",
        "    df['rsi'] = df['rsi'].fillna(50) # Fill NaNs (e.g., at the beginning) with neutral 50\n",
        "\n",
        "    ema_fast = EWM_pandas_global(df['close'], span=MACD_FAST_G, min_periods=MACD_FAST_G//2)\n",
        "    ema_slow = EWM_pandas_global(df['close'], span=MACD_SLOW_G, min_periods=MACD_SLOW_G//2)\n",
        "    df['macd'] = ema_fast - ema_slow\n",
        "    df['macd_signal'] = EWM_pandas_global(df['macd'], span=MACD_SIGNAL_G, min_periods=MACD_SIGNAL_G//2)\n",
        "    df['macd_hist'] = df['macd'] - df['macd_signal']\n",
        "\n",
        "    df['h_minus_l'] = df['high'] - df['low']\n",
        "    df['h_minus_cp'] = abs(df['high'] - df['close'].shift(1))\n",
        "    df['l_minus_cp'] = abs(df['low'] - df['close'].shift(1))\n",
        "    df['true_range'] = df[['h_minus_l', 'h_minus_cp', 'l_minus_cp']].max(axis=1, skipna=False)\n",
        "    df['true_range'] = pd.to_numeric(df['true_range'], errors='coerce')\n",
        "    df['atr'] = EWM_pandas_global(df['true_range'], span=ATR_PERIOD_G*2-1 if ATR_PERIOD_G > 0 else 1, min_periods=ATR_PERIOD_G)\n",
        "\n",
        "    move_up = df['high'].diff()\n",
        "    move_down = -(df['low'].diff()) # low diff is inverted, so - makes it positive\n",
        "    plus_dm = pd.Series(np.where((move_up > move_down) & (move_up > 0), move_up, 0.0), index=df.index)\n",
        "    minus_dm = pd.Series(np.where((move_down > move_up) & (move_down > 0), move_down, 0.0), index=df.index)\n",
        "\n",
        "    atr_for_di = df['atr'].replace(0, 1e-9).fillna(1e-9) # Ensure ATR is not zero for division\n",
        "    if not atr_for_di.isnull().all() and ADX_PERIOD_G > 0:\n",
        "        smooth_plus_dm = EWM_pandas_global(plus_dm, span=ADX_PERIOD_G*2-1, min_periods=ADX_PERIOD_G)\n",
        "        smooth_minus_dm = EWM_pandas_global(minus_dm, span=ADX_PERIOD_G*2-1, min_periods=ADX_PERIOD_G)\n",
        "        plus_di = 100.0 * (smooth_plus_dm / atr_for_di)\n",
        "        minus_di = 100.0 * (smooth_minus_dm / atr_for_di)\n",
        "        dx_denominator = abs(plus_di + minus_di).replace(0,1e-9).fillna(1e-9)\n",
        "        dx = 100.0 * (abs(plus_di - minus_di) / dx_denominator)\n",
        "        df['adx_simplified'] = EWM_pandas_global(dx, span=ADX_PERIOD_G*2-1, min_periods=ADX_PERIOD_G)\n",
        "        df['adx_simplified'] = df['adx_simplified'].fillna(20) # Fill initial NaNs with a common neutral ADX value\n",
        "    else: df['adx_simplified'] = 20.0\n",
        "\n",
        "    tp = (df['high'] + df['low'] + df['close']) / 3.0\n",
        "    sma_tp = tp.rolling(window=CCI_PERIOD_G, min_periods=max(1, CCI_PERIOD_G // 2)).mean()\n",
        "    mean_dev_abs = abs(tp - sma_tp)\n",
        "    mean_dev = mean_dev_abs.rolling(window=CCI_PERIOD_G, min_periods=max(1, CCI_PERIOD_G // 2)).mean()\n",
        "    df['cci'] = (tp - sma_tp) / (0.015 * (mean_dev.replace(0,1e-9).fillna(1e-9)))\n",
        "    df['cci'] = df['cci'].fillna(0)\n",
        "\n",
        "    df['volatility_20_std'] = df['returns_1'].rolling(window=20, min_periods=10).std() # Std of returns\n",
        "\n",
        "    atr_safe_denominator = df['atr'].replace(0,1e-9).fillna(1e-9)\n",
        "    df['price_vs_high_norm'] = (df['close'] - df['high_lookback']) / atr_safe_denominator\n",
        "    df['price_vs_high_norm'].fillna(0, inplace=True) # Fill cases where ATR or high_lookback might be NaN\n",
        "\n",
        "    if isinstance(df.index, pd.DatetimeIndex):\n",
        "        df['hour'] = df.index.hour\n",
        "        df['dayofweek'] = df.index.dayofweek\n",
        "    else: # Should not happen if data prep is correct\n",
        "        temp_dt_index = pd.to_datetime(df.index, errors='coerce')\n",
        "        df['hour'] = temp_dt_index.hour\n",
        "        df['dayofweek'] = temp_dt_index.dayofweek\n",
        "\n",
        "    # --- Sector ETF Features ---\n",
        "    if df_sector_aligned is not None and not df_sector_aligned.empty and 'close' in df_sector_aligned.columns:\n",
        "        # Ensure sector data is numeric and align to stock's index (should already be aligned but good practice)\n",
        "        df_sector_close_numeric = pd.to_numeric(df_sector_aligned['close'], errors='coerce')\n",
        "        df_sector_close_aligned = df_sector_close_numeric.reindex(df.index, method='ffill')\n",
        "\n",
        "        df['sector_ma'] = df_sector_close_aligned.rolling(window=SECTOR_MA_PERIOD_G, min_periods=max(1,SECTOR_MA_PERIOD_G//2)).mean()\n",
        "        df['stock_vs_sector_ma'] = df['close'] / (df['sector_ma'].replace(0,1e-9).fillna(1e-9))\n",
        "        df['sector_above_ma'] = (df_sector_close_aligned > df['sector_ma']).astype(int)\n",
        "        df['sector_return_5'] = df_sector_close_aligned.pct_change(5)\n",
        "    else:\n",
        "        df['sector_ma'] = np.nan; df['stock_vs_sector_ma'] = np.nan; df['sector_above_ma'] = 0; df['sector_return_5'] = np.nan\n",
        "\n",
        "    # --- VIX Proxy Features ---\n",
        "    if df_vix_proxy_aligned is not None and not df_vix_proxy_aligned.empty and 'close' in df_vix_proxy_aligned.columns:\n",
        "        df_vix_close_numeric = pd.to_numeric(df_vix_proxy_aligned['close'], errors='coerce')\n",
        "        df_vix_close_aligned = df_vix_close_numeric.reindex(df.index, method='ffill')\n",
        "\n",
        "        df['vix_close'] = df_vix_close_aligned\n",
        "        df['vix_ma'] = df_vix_close_aligned.rolling(window=VIX_PROXY_MA_PERIOD_G, min_periods=max(1,VIX_PROXY_MA_PERIOD_G//2)).mean()\n",
        "        df['vix_above_ma'] = (df_vix_close_aligned > df['vix_ma']).astype(int)\n",
        "        df['vix_above_threshold'] = (df_vix_close_aligned > VIX_PROXY_THRESHOLD_HIGH_G).astype(int)\n",
        "    else:\n",
        "        df['vix_close'] = np.nan; df['vix_ma'] = np.nan; df['vix_above_ma'] = 0; df['vix_above_threshold'] = 0\n",
        "\n",
        "    # --- Label Definition (Only if calculate_labels is True) ---\n",
        "    if calculate_labels:\n",
        "        df['label'] = 0 # Default to no trade or loss/timeout\n",
        "        # Access global labeling parameters from Cell 2\n",
        "        # These are PROFIT_TARGET_PCT_G, STOP_LOSS_PCT_G, LOOK_FORWARD_BARS_G\n",
        "        for i in range(len(df) - LOOK_FORWARD_BARS_G):\n",
        "            entry_price = df['close'].iloc[i]\n",
        "            if pd.isna(entry_price): continue\n",
        "\n",
        "            profit_price = entry_price * (1 + PROFIT_TARGET_PCT_G)\n",
        "            stop_price = entry_price * (1 - STOP_LOSS_PCT_G)\n",
        "\n",
        "            outcome_found = False\n",
        "            for j in range(1, LOOK_FORWARD_BARS_G + 1):\n",
        "                if i + j >= len(df): break # Ensure we don't go out of bounds\n",
        "\n",
        "                future_low = df['low'].iloc[i+j]\n",
        "                future_high = df['high'].iloc[i+j]\n",
        "\n",
        "                if pd.isna(future_low) or pd.isna(future_high): continue # Skip if future data is NaN\n",
        "\n",
        "                # Stop loss condition\n",
        "                if future_low <= stop_price:\n",
        "                    df.loc[df.index[i], 'label'] = 0 # Loss\n",
        "                    outcome_found = True\n",
        "                    break\n",
        "                # Profit target condition\n",
        "                if future_high >= profit_price:\n",
        "                    df.loc[df.index[i], 'label'] = 1 # Profit\n",
        "                    outcome_found = True\n",
        "                    break\n",
        "            # If neither stop nor profit hit within LOOK_FORWARD_BARS_G, label remains 0 (timeout)\n",
        "    else:\n",
        "        if 'label' in df.columns: # If called with calculate_labels=False but label exists\n",
        "            pass # Keep existing label or do nothing; for prediction, it's not used as a feature\n",
        "        # else: df['label'] = np.nan # Or assign NaN if a label column is expected by downstream code (not typical for prediction features)\n",
        "\n",
        "\n",
        "    # Final check for infinities that might arise from divisions\n",
        "    df.replace([np.inf, -np.inf], np.nan, inplace=True)\n",
        "    return df\n",
        "\n",
        "# --- Apply feature engineering for all TRADING_SYMBOLS ---\n",
        "all_featured_dfs = []\n",
        "\n",
        "if 'aligned_market_data' not in locals() or not aligned_market_data:\n",
        "    raise SystemExit(\"`aligned_market_data` not found or empty. Please run Cell 3 successfully.\")\n",
        "\n",
        "for symbol in TRADING_SYMBOLS:\n",
        "    if symbol in aligned_market_data and not aligned_market_data[symbol].empty:\n",
        "        df_stock = aligned_market_data[symbol]\n",
        "\n",
        "        sector_ticker = SECTOR_ETF_MAP.get(symbol)\n",
        "        # Get aligned sector data, ensure it's not empty before passing\n",
        "        df_sector_raw = aligned_market_data.get(sector_ticker)\n",
        "        df_sector = df_sector_raw if (df_sector_raw is not None and not df_sector_raw.empty) else None\n",
        "\n",
        "        # Get aligned VIX proxy data\n",
        "        df_vix_proxy_raw = aligned_market_data.get(VIX_PROXY_TICKER)\n",
        "        df_vix_proxy = df_vix_proxy_raw if (df_vix_proxy_raw is not None and not df_vix_proxy_raw.empty) else None\n",
        "\n",
        "\n",
        "        logger.info(f\"\\nProcessing features for: {symbol} (Sector: {sector_ticker or 'None'}, VIX Proxy: {VIX_PROXY_TICKER if df_vix_proxy is not None else 'None'})\")\n",
        "        if df_sector is None and sector_ticker: logger.warning(f\"  Sector ETF '{sector_ticker}' data not found/empty in aligned_market_data for {symbol}.\")\n",
        "        if df_vix_proxy is None and VIX_PROXY_TICKER: logger.warning(f\"  VIX Proxy '{VIX_PROXY_TICKER}' data not found/empty in aligned_market_data.\")\n",
        "\n",
        "        # Call with calculate_labels=True for training data generation\n",
        "        df_sym_featured = calculate_manual_features_enhanced(df_stock, df_sector, df_vix_proxy, calculate_labels=True)\n",
        "\n",
        "        if not df_sym_featured.empty:\n",
        "            df_sym_featured['symbol'] = symbol # Add symbol identifier\n",
        "            all_featured_dfs.append(df_sym_featured)\n",
        "            logger.info(f\"  Generated {len(df_sym_featured)} featured rows for {symbol}.\")\n",
        "            # Log NaN counts for key new features to diagnose issues early\n",
        "            context_cols_check = ['sector_ma', 'vix_close', 'price_vs_high_norm', 'adx_simplified']\n",
        "            for fcol in context_cols_check:\n",
        "                if fcol in df_sym_featured.columns:\n",
        "                    nan_pct = df_sym_featured[fcol].isnull().sum() * 100 / len(df_sym_featured)\n",
        "                    if nan_pct > 50 : # If more than 50% NaNs, it's a concern\n",
        "                         logger.warning(f\"    High NaNs in '{fcol}' for {symbol}: {nan_pct:.2f}%\")\n",
        "        else:\n",
        "            logger.warning(f\"  No features generated for {symbol} (result was empty after calculation).\")\n",
        "    else:\n",
        "        logger.warning(f\"No aligned data found for trading symbol: {symbol}. Skipping feature engineering for it.\")\n",
        "\n",
        "df_featured_combined = pd.DataFrame()\n",
        "if all_featured_dfs:\n",
        "    df_featured_combined = pd.concat(all_featured_dfs)\n",
        "    # Sort by time, then by symbol (optional, but good for chronological splits if done per symbol then combined)\n",
        "    # However, for a global chronological split, sorting by time only is key.\n",
        "    df_featured_combined.sort_index(inplace=True) # Sort by timestamp index primarily\n",
        "\n",
        "    logger.info(f\"\\nCombined featured data shape for all symbols: {df_featured_combined.shape}\")\n",
        "    if not df_featured_combined.empty:\n",
        "        logger.info(f\"Sample of combined features (head):\\n{df_featured_combined.head()}\")\n",
        "        if 'label' in df_featured_combined.columns:\n",
        "            logger.info(f\"\\nLabel distribution in combined data (before NaN drop for model):\\n{df_featured_combined['label'].value_counts(normalize=True, dropna=False)}\")\n",
        "        else:\n",
        "            logger.warning(\"Label column not found in df_featured_combined. This is unexpected for training.\")\n",
        "    else:\n",
        "        logger.warning(\"Combined featured DataFrame is empty after concatenation.\")\n",
        "else:\n",
        "    logger.error(\"No featured DataFrames were created for any symbol. df_featured_combined will be empty.\")\n",
        "\n",
        "if df_featured_combined.empty:\n",
        "    raise SystemExit(\"DataFrame for model training is empty after feature engineering. Halting.\")\n",
        "\n",
        "logger.info(\"\\n--- Cell 4: Feature Engineering and Combination Complete ---\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EeRee07YPO4U",
        "outputId": "1acb202a-72df-461d-95a5-20fa56c1f0c9"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:root:\n",
            "Processing features for: AAPL (Sector: XLK, VIX Proxy: VIXY)\n",
            "INFO:root:  Generated 5989 featured rows for AAPL.\n",
            "INFO:root:\n",
            "Processing features for: MSFT (Sector: XLK, VIX Proxy: VIXY)\n",
            "INFO:root:  Generated 5988 featured rows for MSFT.\n",
            "INFO:root:\n",
            "Processing features for: GOOGL (Sector: XLK, VIX Proxy: VIXY)\n",
            "INFO:root:  Generated 5988 featured rows for GOOGL.\n",
            "INFO:root:\n",
            "Processing features for: NVDA (Sector: SOXX, VIX Proxy: VIXY)\n",
            "INFO:root:  Generated 5988 featured rows for NVDA.\n",
            "INFO:root:\n",
            "Processing features for: JPM (Sector: XLF, VIX Proxy: VIXY)\n",
            "INFO:root:  Generated 5974 featured rows for JPM.\n",
            "INFO:root:\n",
            "Processing features for: V (Sector: XLF, VIX Proxy: VIXY)\n",
            "INFO:root:  Generated 5970 featured rows for V.\n",
            "INFO:root:\n",
            "Processing features for: TSLA (Sector: XLY, VIX Proxy: VIXY)\n",
            "INFO:root:  Generated 5989 featured rows for TSLA.\n",
            "INFO:root:\n",
            "Combined featured data shape for all symbols: (41886, 36)\n",
            "INFO:root:Sample of combined features (head):\n",
            "                             open    high     low   close    volume  \\\n",
            "timestamp                                                             \n",
            "2021-06-03 08:00:00-04:00  121.36  121.36  121.36  121.36     300.0   \n",
            "2021-06-03 08:00:00-04:00  197.45  198.07  197.45  198.07    1056.0   \n",
            "2021-06-03 09:00:00-04:00  237.28  237.47  235.65  235.82   88530.0   \n",
            "2021-06-03 09:00:00-04:00  200.60  201.28  197.47  199.78  330735.0   \n",
            "2021-06-03 09:00:00-04:00  148.52  149.37  147.87  149.23   26720.0   \n",
            "\n",
            "                           returns_1  returns_5  returns_24  high_lookback  \\\n",
            "timestamp                                                                    \n",
            "2021-06-03 08:00:00-04:00        NaN        NaN         NaN            NaN   \n",
            "2021-06-03 08:00:00-04:00        NaN        NaN         NaN            NaN   \n",
            "2021-06-03 09:00:00-04:00        NaN        NaN         NaN            NaN   \n",
            "2021-06-03 09:00:00-04:00   0.008633        NaN         NaN            NaN   \n",
            "2021-06-03 09:00:00-04:00        NaN        NaN         NaN            NaN   \n",
            "\n",
            "                           volume_avg_lookback  ...  sector_ma  \\\n",
            "timestamp                                       ...              \n",
            "2021-06-03 08:00:00-04:00                  NaN  ...        NaN   \n",
            "2021-06-03 08:00:00-04:00                  NaN  ...        NaN   \n",
            "2021-06-03 09:00:00-04:00                  NaN  ...        NaN   \n",
            "2021-06-03 09:00:00-04:00                  NaN  ...        NaN   \n",
            "2021-06-03 09:00:00-04:00                  NaN  ...        NaN   \n",
            "\n",
            "                           stock_vs_sector_ma  sector_above_ma  \\\n",
            "timestamp                                                        \n",
            "2021-06-03 08:00:00-04:00        1.213600e+11                0   \n",
            "2021-06-03 08:00:00-04:00        1.980700e+11                0   \n",
            "2021-06-03 09:00:00-04:00        2.358200e+11                0   \n",
            "2021-06-03 09:00:00-04:00        1.997800e+11                0   \n",
            "2021-06-03 09:00:00-04:00        1.492300e+11                0   \n",
            "\n",
            "                           sector_return_5  vix_close  vix_ma  vix_above_ma  \\\n",
            "timestamp                                                                     \n",
            "2021-06-03 08:00:00-04:00              NaN      577.8     NaN             0   \n",
            "2021-06-03 08:00:00-04:00              NaN      577.8     NaN             0   \n",
            "2021-06-03 09:00:00-04:00              NaN      577.8     NaN             0   \n",
            "2021-06-03 09:00:00-04:00              NaN      577.8     NaN             0   \n",
            "2021-06-03 09:00:00-04:00              NaN      577.8     NaN             0   \n",
            "\n",
            "                           vix_above_threshold  label  symbol  \n",
            "timestamp                                                      \n",
            "2021-06-03 08:00:00-04:00                    1      0    AAPL  \n",
            "2021-06-03 08:00:00-04:00                    1      1    TSLA  \n",
            "2021-06-03 09:00:00-04:00                    1      1    MSFT  \n",
            "2021-06-03 09:00:00-04:00                    1      0    TSLA  \n",
            "2021-06-03 09:00:00-04:00                    1      0     JPM  \n",
            "\n",
            "[5 rows x 36 columns]\n",
            "INFO:root:\n",
            "Label distribution in combined data (before NaN drop for model):\n",
            "label\n",
            "0    0.591319\n",
            "1    0.408681\n",
            "Name: proportion, dtype: float64\n",
            "INFO:root:\n",
            "--- Cell 4: Feature Engineering and Combination Complete ---\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# %% [code] -- CELL 5: Prepare Data for Model & Train (with Optuna Hyperparameter Optimization)\n",
        "\n",
        "import optuna\n",
        "from sklearn.model_selection import TimeSeriesSplit\n",
        "\n",
        "# Ensure df_featured_combined is available and valid from Cell 4\n",
        "if 'df_featured_combined' not in globals() or df_featured_combined.empty:\n",
        "    logger.critical(\"df_featured_combined is not available or empty. Run Cell 4. Halting.\")\n",
        "    raise SystemExit(\"df_featured_combined is missing.\")\n",
        "if 'label' not in df_featured_combined.columns:\n",
        "    logger.critical(\"'label' column is missing from df_featured_combined. Halting.\")\n",
        "    raise SystemExit(\"'label' column missing.\")\n",
        "\n",
        "min_data_threshold = 1000 # Need at least 1000 samples to train a decent model\n",
        "if len(df_featured_combined) < min_data_threshold:\n",
        "    logger.critical(f\"Not enough data after feature engineering ({len(df_featured_combined)} rows, need {min_data_threshold}). Halting model training.\")\n",
        "    raise SystemExit(\"Insufficient data for training.\")\n",
        "else:\n",
        "    potential_features = [\n",
        "        'returns_1', 'returns_5', 'returns_24',\n",
        "        'is_breakout_candidate',\n",
        "        'rsi', 'macd', 'macd_signal', 'macd_hist', 'atr',\n",
        "        'adx_simplified', 'cci', 'volatility_20_std', 'price_vs_high_norm',\n",
        "        'volume_avg_lookback', 'volume',\n",
        "        'hour', 'dayofweek',\n",
        "        'stock_vs_sector_ma', 'sector_above_ma', 'sector_return_5',\n",
        "        'vix_close', 'vix_ma', 'vix_above_ma', 'vix_above_threshold'\n",
        "    ]\n",
        "\n",
        "    df_model_ready = df_featured_combined.copy()\n",
        "    features_to_use = [f for f in potential_features if f in df_model_ready.columns]\n",
        "\n",
        "    df_model_ready.dropna(subset=['label'], inplace=True)\n",
        "    df_model_ready['label'] = df_model_ready['label'].astype(int)\n",
        "    df_model_ready.replace([np.inf, -np.inf], np.nan, inplace=True)\n",
        "\n",
        "    nan_rows_before_drop = df_model_ready[features_to_use].isnull().any(axis=1).sum()\n",
        "    logger.info(f\"Rows with NaNs in features before final drop for model training: {nan_rows_before_drop} out of {len(df_model_ready)}\")\n",
        "    df_model_ready.dropna(subset=features_to_use, inplace=True)\n",
        "\n",
        "    if df_model_ready.empty or len(df_model_ready) < min_data_threshold / 2 :\n",
        "        logger.critical(f\"Not enough clean data rows after final NaN drop ({len(df_model_ready)}). Halting.\")\n",
        "        raise SystemExit(\"Insufficient clean data for training.\")\n",
        "\n",
        "    logger.info(f\"\\nFeatures selected for training ({len(features_to_use)}): {features_to_use}\")\n",
        "\n",
        "    X = df_model_ready[features_to_use]\n",
        "    y = df_model_ready['label']\n",
        "\n",
        "    # Ensure data is sorted by index for chronological split\n",
        "    if not X.index.is_monotonic_increasing:\n",
        "        logger.info(\"Sorting data by index before chronological split...\")\n",
        "        X = X.sort_index()\n",
        "        y = y.loc[X.index]\n",
        "\n",
        "    # Overall Train-Test Split (Test set is held out and NOT used in Optuna)\n",
        "    # TEST_SIZE_RATIO and RANDOM_STATE should be defined (e.g., in Cell 2 or 3)\n",
        "    # If TEST_SIZE_RATIO = 0.2, then 80% for train+Optuna_CV, 20% for final test\n",
        "    split_index_overall = int(len(X) * (1 - TEST_SIZE_RATIO))\n",
        "    X_train_optuna, X_test = X.iloc[:split_index_overall], X.iloc[split_index_overall:]\n",
        "    y_train_optuna, y_test = y.iloc[:split_index_overall], y.iloc[split_index_overall:]\n",
        "\n",
        "    logger.info(f\"Overall data split: Optuna Training/CV size: {X_train_optuna.shape[0]}, Final Test size: {X_test.shape[0]}\")\n",
        "    if y_train_optuna.empty or X_train_optuna.empty:\n",
        "        logger.critical(\"Training set for Optuna is empty. Halting.\")\n",
        "        raise SystemExit(\"Training set for Optuna empty.\")\n",
        "    logger.info(f\"Optuna Training label distribution:\\n{y_train_optuna.value_counts(normalize=True)}\")\n",
        "\n",
        "    if y_test.empty or X_test.empty:\n",
        "        logger.warning(\"Final Test set is empty. Final evaluation will not be possible.\")\n",
        "    else:\n",
        "        logger.info(f\"Final Test label distribution:\\n{y_test.value_counts(normalize=True)}\")\n",
        "\n",
        "\n",
        "    if X_train_optuna.empty or (not X_test.empty and y_train_optuna.nunique() < 2) or (not X_test.empty and y_test.nunique() < 2) :\n",
        "        logger.critical(\"Optuna training data is insufficient or labels have only one class. Halting model training.\")\n",
        "        raise SystemExit(\"Data insufficiency for Optuna/test.\")\n",
        "\n",
        "    # --- Optuna Objective Function ---\n",
        "    def objective(trial):\n",
        "        # Define hyperparameter search space\n",
        "        params = {\n",
        "            'objective': 'binary',\n",
        "            'metric': 'auc', # Optimize for AUC\n",
        "            'boosting_type': 'gbdt',\n",
        "            'n_estimators': trial.suggest_int('n_estimators', 500, 5000), # Increased range\n",
        "            'learning_rate': trial.suggest_float('learning_rate', 1e-4, 5e-2, log=True), # Wider, lower range\n",
        "            'num_leaves': trial.suggest_int('num_leaves', 10, 80), # Wider range\n",
        "            'max_depth': trial.suggest_int('max_depth', 3, 15), # Wider range, or -1\n",
        "            'min_child_samples': trial.suggest_int('min_child_samples', 10, 150), # Wider range\n",
        "            'subsample': trial.suggest_float('subsample', 0.5, 1.0),\n",
        "            'colsample_bytree': trial.suggest_float('colsample_bytree', 0.4, 1.0), # Wider range\n",
        "            'reg_alpha': trial.suggest_float('reg_alpha', 1e-3, 5.0, log=True), # L1\n",
        "            'reg_lambda': trial.suggest_float('reg_lambda', 1e-3, 5.0, log=True), # L2\n",
        "            'class_weight': trial.suggest_categorical('class_weight', [None, 'balanced']), # Let Optuna choose\n",
        "            'random_state': RANDOM_STATE, # Defined in Cell 2\n",
        "            'n_jobs': -1,\n",
        "            'verbose': -1 # Suppress LightGBM's own verbosity during trials\n",
        "        }\n",
        "\n",
        "        tscv = TimeSeriesSplit(n_splits=4) # 4 splits for cross-validation (adjust as needed)\n",
        "        auc_scores = []\n",
        "\n",
        "        for fold, (train_idx, val_idx) in enumerate(tscv.split(X_train_optuna, y_train_optuna)):\n",
        "            X_train_fold, X_val_fold = X_train_optuna.iloc[train_idx], X_train_optuna.iloc[val_idx]\n",
        "            y_train_fold, y_val_fold = y_train_optuna.iloc[train_idx], y_train_optuna.iloc[val_idx]\n",
        "\n",
        "            if y_train_fold.nunique() < 2 or y_val_fold.nunique() < 2:\n",
        "                logger.warning(f\"Optuna Trial {trial.number}, Fold {fold+1}: Skipping fold due to single class in train/val split.\")\n",
        "                continue # Skip fold if not enough classes\n",
        "\n",
        "            model = lgb.LGBMClassifier(**params)\n",
        "            model.fit(X_train_fold, y_train_fold,\n",
        "                      eval_set=[(X_val_fold, y_val_fold)],\n",
        "                      eval_metric='auc',\n",
        "                      callbacks=[lgb.early_stopping(stopping_rounds=100, verbose=False)]) # Early stopping for each fold\n",
        "\n",
        "            preds_proba_fold = model.predict_proba(X_val_fold)[:, 1]\n",
        "            try:\n",
        "                fold_auc = roc_auc_score(y_val_fold, preds_proba_fold)\n",
        "                auc_scores.append(fold_auc)\n",
        "            except ValueError as e: # Handles case where y_val_fold might be all one class after splitting\n",
        "                 logger.warning(f\"Optuna Trial {trial.number}, Fold {fold+1}: ROC AUC error ({e}). Might be single class in y_val_fold. Score for this fold is 0.\")\n",
        "                 auc_scores.append(0.0) # Penalize this trial/fold\n",
        "\n",
        "        if not auc_scores: # If all folds were skipped\n",
        "            return 0.0 # Return a poor score\n",
        "\n",
        "        return np.mean(auc_scores)\n",
        "\n",
        "    # --- Run Optuna Study ---\n",
        "    logger.info(\"\\nStarting Optuna hyperparameter optimization...\")\n",
        "    study = optuna.create_study(direction='maximize', pruner=optuna.pruners.MedianPruner(n_warmup_steps=5))\n",
        "    # n_trials: Number of different hyperparameter sets to try. Increase for more thorough search.\n",
        "    # timeout: Max time in seconds for the study.\n",
        "    study.optimize(objective, n_trials=50, timeout=1800) # e.g., 50 trials or 30 minutes\n",
        "\n",
        "    logger.info(f\"Optuna study finished. Number of finished trials: {len(study.trials)}\")\n",
        "    logger.info(f\"Best trial average AUC (CV): {study.best_value:.4f}\")\n",
        "    logger.info(f\"Best hyperparameters: {study.best_params}\")\n",
        "\n",
        "    best_lgbm_params = study.best_params\n",
        "\n",
        "    # --- Train Final Model with Best Hyperparameters on Full Training Data (X_train_optuna) ---\n",
        "    logger.info(\"\\nTraining final LightGBM model with best hyperparameters found by Optuna...\")\n",
        "    final_lgbm_model = lgb.LGBMClassifier(**best_lgbm_params)\n",
        "\n",
        "    # If the best params didn't include n_estimators (e.g. if it was fixed), set it high for early stopping.\n",
        "    # Optuna usually includes it. If 'n_estimators' is in best_lgbm_params, it will be used.\n",
        "    # Otherwise, ensure early stopping can work with a sufficiently large number.\n",
        "    if 'n_estimators' not in best_lgbm_params: # Safety, though Optuna should suggest it\n",
        "        final_lgbm_model.set_params(n_estimators=5000) # Set high for early stopping\n",
        "\n",
        "    # Check if test set is available for early stopping eval_set\n",
        "    if not X_test.empty and not y_test.empty and y_test.nunique() >= 2 :\n",
        "        final_lgbm_model.fit(X_train_optuna, y_train_optuna,\n",
        "                            eval_set=[(X_test, y_test)], # Use the *actual held-out test set* for early stopping monitoring\n",
        "                            eval_metric='auc',\n",
        "                            callbacks=[lgb.early_stopping(stopping_rounds=150, verbose=10)]) # More patience for final model\n",
        "    else: # If no valid test set for early stopping, train on all X_train_optuna without it\n",
        "        logger.warning(\"Final test set is empty or unsuitable for early stopping. Training final model on X_train_optuna without eval_set for early stopping.\")\n",
        "        final_lgbm_model.fit(X_train_optuna, y_train_optuna)\n",
        "\n",
        "\n",
        "    logger.info(\"\\nFinal model training complete.\")\n",
        "\n",
        "    # --- Evaluate Final Model on the Hold-Out Test Set ---\n",
        "    if X_test.empty or y_test.empty:\n",
        "        logger.warning(\"Final test set (X_test, y_test) is empty. Skipping final evaluation.\")\n",
        "        optimal_threshold_final = 0.5 # Default\n",
        "    elif y_test.nunique() < 2:\n",
        "        logger.warning(f\"Final test set (y_test) has only {y_test.nunique()} unique class(es). Skipping detailed evaluation.\")\n",
        "        optimal_threshold_final = 0.5 # Default\n",
        "    else:\n",
        "        logger.info(\"\\nEvaluating final model on the hold-out test set...\")\n",
        "        if hasattr(final_lgbm_model, 'best_iteration_') and final_lgbm_model.best_iteration_ is not None:\n",
        "            logger.info(f\"Best iteration for final model: {final_lgbm_model.best_iteration_}\")\n",
        "\n",
        "        preds_proba_class1_final = final_lgbm_model.predict_proba(X_test)[:, 1]\n",
        "\n",
        "        optimal_threshold_final = 0.5\n",
        "        best_f1_class1_final = -1.0\n",
        "        thresholds_final = np.arange(0.25, 0.76, 0.01)\n",
        "        f1_scores_at_thresholds_final = []\n",
        "\n",
        "        for th_f in thresholds_final:\n",
        "            preds_binary_th_f = (preds_proba_class1_final >= th_f).astype(int)\n",
        "            current_f1_class1_f = f1_score(y_test, preds_binary_th_f, pos_label=1, zero_division=0)\n",
        "            f1_scores_at_thresholds_final.append(current_f1_class1_f)\n",
        "            if current_f1_class1_f > best_f1_class1_final:\n",
        "                best_f1_class1_final = current_f1_class1_f\n",
        "                optimal_threshold_final = th_f\n",
        "\n",
        "        logger.info(f\"Optimal threshold for final model (F1-score class '1'): {optimal_threshold_final:.2f} (F1: {best_f1_class1_final:.4f})\")\n",
        "\n",
        "        plt.figure(figsize=(8, 5))\n",
        "        plt.plot(thresholds_final, f1_scores_at_thresholds_final, label='F1 Score Class 1')\n",
        "        plt.title('Final Model: F1 Score vs. Prediction Threshold on Test Set')\n",
        "        plt.xlabel('Threshold'); plt.ylabel('F1 Score (Class 1)')\n",
        "        plt.axvline(optimal_threshold_final, color='r', linestyle='--', label=f'Optimal Threshold: {optimal_threshold_final:.2f}')\n",
        "        plt.legend(); plt.grid(True); plt.show()\n",
        "\n",
        "        final_preds_optimized_test = (preds_proba_class1_final >= optimal_threshold_final).astype(int)\n",
        "\n",
        "        logger.info(\"\\nFinal Model Classification Report (Test Set, optimized threshold):\")\n",
        "        print(classification_report(y_test, final_preds_optimized_test, zero_division=0))\n",
        "\n",
        "        logger.info(\"\\nFinal Model Confusion Matrix (Test Set, optimized threshold):\")\n",
        "        cm_final = confusion_matrix(y_test, final_preds_optimized_test)\n",
        "        sns.heatmap(cm_final, annot=True, fmt='d', cmap='Blues', xticklabels=['Predicted 0', 'Predicted 1'], yticklabels=['Actual 0', 'Actual 1'])\n",
        "        plt.xlabel('Predicted Label'); plt.ylabel('Actual Label'); plt.title('Final Model Confusion Matrix'); plt.show()\n",
        "\n",
        "        roc_auc_final = roc_auc_score(y_test, preds_proba_class1_final)\n",
        "        logger.info(f\"\\nFinal Model ROC AUC Score (Test Set): {roc_auc_final:.4f}\")\n",
        "\n",
        "        if hasattr(final_lgbm_model, 'feature_importances_'):\n",
        "            feature_imp_df_final = pd.DataFrame({\n",
        "                'feature': X_train_optuna.columns, # Features used for Optuna training\n",
        "                'importance': final_lgbm_model.feature_importances_\n",
        "            }).sort_values('importance', ascending=False)\n",
        "\n",
        "            plt.figure(figsize=(10, max(8, len(X_train_optuna.columns) * 0.35)))\n",
        "            sns.barplot(x='importance', y='feature', data=feature_imp_df_final.head(min(30, len(X_train_optuna.columns))))\n",
        "            plt.title(f'Final Model LightGBM Feature Importances (Top {min(30, len(X_train_optuna.columns))})')\n",
        "            plt.tight_layout(); plt.show()\n",
        "\n",
        "    # --- Save Model & Artifacts ---\n",
        "    MODEL_FILENAME = 'breakout_predictor_multi_optimized.pkl' # New name for optimized model\n",
        "    THRESHOLD_FILENAME = 'optimal_threshold_multi_optimized.pkl'\n",
        "    FEATURE_LIST_FILENAME = 'feature_list_multi_optimized.pkl'\n",
        "\n",
        "    logger.info(f\"\\nSaving optimized model and artifacts to: {MODEL_FILENAME}, {THRESHOLD_FILENAME}, {FEATURE_LIST_FILENAME}\")\n",
        "    joblib.dump(final_lgbm_model, MODEL_FILENAME)\n",
        "    joblib.dump(optimal_threshold_final, THRESHOLD_FILENAME)\n",
        "    joblib.dump(list(X_train_optuna.columns), FEATURE_LIST_FILENAME) # Save actual columns used\n",
        "    logger.info(\"Optimized model, threshold, and feature list saved successfully.\")\n",
        "\n",
        "    # Suggestion to update Cell 6 and 7 to use new filenames\n",
        "    logger.info(f\"\\nIMPORTANT: Update ML artifact paths in Cell 6 (MLBreakoutStrategy) and Cell 7 (Backtest) to use:\")\n",
        "    logger.info(f\"  ml_model_path='{MODEL_FILENAME}'\")\n",
        "    logger.info(f\"  ml_threshold_path='{THRESHOLD_FILENAME}'\")\n",
        "    logger.info(f\"  ml_feature_list_path='{FEATURE_LIST_FILENAME}'\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Rq_0Inu-PYfd",
        "outputId": "594e3812-3596-4711-dec8-ab1e2ba8508d"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:root:Rows with NaNs in features before final drop for model training: 175 out of 41886\n",
            "INFO:root:\n",
            "Features selected for training (24): ['returns_1', 'returns_5', 'returns_24', 'is_breakout_candidate', 'rsi', 'macd', 'macd_signal', 'macd_hist', 'atr', 'adx_simplified', 'cci', 'volatility_20_std', 'price_vs_high_norm', 'volume_avg_lookback', 'volume', 'hour', 'dayofweek', 'stock_vs_sector_ma', 'sector_above_ma', 'sector_return_5', 'vix_close', 'vix_ma', 'vix_above_ma', 'vix_above_threshold']\n",
            "INFO:root:Overall data split: Optuna Training/CV size: 33368, Final Test size: 8343\n",
            "INFO:root:Optuna Training label distribution:\n",
            "label\n",
            "0    0.591495\n",
            "1    0.408505\n",
            "Name: proportion, dtype: float64\n",
            "INFO:root:Final Test label distribution:\n",
            "label\n",
            "0    0.593791\n",
            "1    0.406209\n",
            "Name: proportion, dtype: float64\n",
            "INFO:root:\n",
            "Starting Optuna hyperparameter optimization...\n",
            "[I 2025-05-24 08:16:50,259] A new study created in memory with name: no-name-27cf3d2c-59ba-4197-92b0-d1e7b134bd7e\n",
            "[I 2025-05-24 08:16:53,196] Trial 0 finished with value: 0.577355726547033 and parameters: {'n_estimators': 2063, 'learning_rate': 0.00029146001888954954, 'num_leaves': 55, 'max_depth': 9, 'min_child_samples': 43, 'subsample': 0.7667472827593724, 'colsample_bytree': 0.42478622813524614, 'reg_alpha': 0.010636656200310372, 'reg_lambda': 0.0054407855395131825, 'class_weight': 'balanced'}. Best is trial 0 with value: 0.577355726547033.\n",
            "[I 2025-05-24 08:16:59,850] Trial 1 finished with value: 0.5897928251484466 and parameters: {'n_estimators': 4970, 'learning_rate': 0.005717373433134447, 'num_leaves': 50, 'max_depth': 9, 'min_child_samples': 101, 'subsample': 0.7338838827442278, 'colsample_bytree': 0.9098862153961137, 'reg_alpha': 1.2572802027491452, 'reg_lambda': 0.07911863911740598, 'class_weight': None}. Best is trial 1 with value: 0.5897928251484466.\n",
            "[I 2025-05-24 08:17:05,898] Trial 2 finished with value: 0.5835284536143565 and parameters: {'n_estimators': 3071, 'learning_rate': 0.015877919966782235, 'num_leaves': 66, 'max_depth': 8, 'min_child_samples': 77, 'subsample': 0.5283788463199819, 'colsample_bytree': 0.41326471562600764, 'reg_alpha': 3.008623068243018, 'reg_lambda': 0.27807761875504006, 'class_weight': 'balanced'}. Best is trial 1 with value: 0.5897928251484466.\n",
            "[I 2025-05-24 08:17:08,916] Trial 3 finished with value: 0.5838214097961721 and parameters: {'n_estimators': 3845, 'learning_rate': 0.0013917358141493353, 'num_leaves': 36, 'max_depth': 13, 'min_child_samples': 71, 'subsample': 0.849242905495854, 'colsample_bytree': 0.5684568965419488, 'reg_alpha': 0.0011204688682889485, 'reg_lambda': 0.006388978487880288, 'class_weight': 'balanced'}. Best is trial 1 with value: 0.5897928251484466.\n",
            "[I 2025-05-24 08:17:12,122] Trial 4 finished with value: 0.5789703314114742 and parameters: {'n_estimators': 4858, 'learning_rate': 0.04043181728757416, 'num_leaves': 51, 'max_depth': 7, 'min_child_samples': 18, 'subsample': 0.8323293083670851, 'colsample_bytree': 0.7489442542941661, 'reg_alpha': 0.001640055431893531, 'reg_lambda': 1.4263007333907203, 'class_weight': 'balanced'}. Best is trial 1 with value: 0.5897928251484466.\n",
            "[I 2025-05-24 08:17:16,992] Trial 5 finished with value: 0.5945399717231523 and parameters: {'n_estimators': 4249, 'learning_rate': 0.018987126859153575, 'num_leaves': 23, 'max_depth': 12, 'min_child_samples': 95, 'subsample': 0.7860868931120376, 'colsample_bytree': 0.8521618922265594, 'reg_alpha': 1.37245283389624, 'reg_lambda': 0.2991285597004, 'class_weight': None}. Best is trial 5 with value: 0.5945399717231523.\n",
            "[I 2025-05-24 08:17:20,693] Trial 6 finished with value: 0.5860782344247901 and parameters: {'n_estimators': 2904, 'learning_rate': 0.00032823078799305947, 'num_leaves': 68, 'max_depth': 15, 'min_child_samples': 103, 'subsample': 0.7099193971975409, 'colsample_bytree': 0.4324366620234388, 'reg_alpha': 0.001701378449268401, 'reg_lambda': 0.005226201544461846, 'class_weight': 'balanced'}. Best is trial 5 with value: 0.5945399717231523.\n",
            "[I 2025-05-24 08:17:22,713] Trial 7 finished with value: 0.589471340800468 and parameters: {'n_estimators': 4903, 'learning_rate': 0.01107415669113256, 'num_leaves': 13, 'max_depth': 8, 'min_child_samples': 65, 'subsample': 0.9429700470586709, 'colsample_bytree': 0.623321909702542, 'reg_alpha': 0.24631639585825404, 'reg_lambda': 0.008805539060879974, 'class_weight': None}. Best is trial 5 with value: 0.5945399717231523.\n",
            "[I 2025-05-24 08:17:24,253] Trial 8 finished with value: 0.5901725390772863 and parameters: {'n_estimators': 1577, 'learning_rate': 0.0005176209772052671, 'num_leaves': 72, 'max_depth': 3, 'min_child_samples': 90, 'subsample': 0.8194630208436271, 'colsample_bytree': 0.7094233132195393, 'reg_alpha': 0.08698703273323709, 'reg_lambda': 0.005037891759787587, 'class_weight': None}. Best is trial 5 with value: 0.5945399717231523.\n",
            "[I 2025-05-24 08:17:28,714] Trial 9 finished with value: 0.5907811652944631 and parameters: {'n_estimators': 2104, 'learning_rate': 0.00031085279097383875, 'num_leaves': 16, 'max_depth': 10, 'min_child_samples': 41, 'subsample': 0.9442118947905678, 'colsample_bytree': 0.92630134773278, 'reg_alpha': 0.0028294270842654685, 'reg_lambda': 0.0036763013780283286, 'class_weight': None}. Best is trial 5 with value: 0.5945399717231523.\n",
            "[I 2025-05-24 08:17:31,597] Trial 10 finished with value: 0.5916761554642684 and parameters: {'n_estimators': 808, 'learning_rate': 0.002207370670612858, 'num_leaves': 28, 'max_depth': 12, 'min_child_samples': 146, 'subsample': 0.6061839518101804, 'colsample_bytree': 0.8199344442579106, 'reg_alpha': 0.6556687719608675, 'reg_lambda': 2.8354833157287764, 'class_weight': None}. Best is trial 5 with value: 0.5945399717231523.\n",
            "[I 2025-05-24 08:17:34,355] Trial 11 finished with value: 0.5915356922546358 and parameters: {'n_estimators': 751, 'learning_rate': 0.0022577601067651156, 'num_leaves': 29, 'max_depth': 12, 'min_child_samples': 139, 'subsample': 0.5921210088101031, 'colsample_bytree': 0.8173923328749256, 'reg_alpha': 0.7613639267640987, 'reg_lambda': 4.45888906210136, 'class_weight': None}. Best is trial 5 with value: 0.5945399717231523.\n",
            "[I 2025-05-24 08:17:37,603] Trial 12 finished with value: 0.5911758994669715 and parameters: {'n_estimators': 3808, 'learning_rate': 0.003097180559701939, 'num_leaves': 27, 'max_depth': 12, 'min_child_samples': 148, 'subsample': 0.6412525133664692, 'colsample_bytree': 0.8281241385313132, 'reg_alpha': 0.3562182196442282, 'reg_lambda': 0.567294531501229, 'class_weight': None}. Best is trial 5 with value: 0.5945399717231523.\n",
            "[I 2025-05-24 08:17:45,044] Trial 13 finished with value: 0.5939861603937447 and parameters: {'n_estimators': 593, 'learning_rate': 0.0009929688667420097, 'num_leaves': 24, 'max_depth': 15, 'min_child_samples': 128, 'subsample': 0.6607161449598042, 'colsample_bytree': 0.9846185530918212, 'reg_alpha': 4.751035535029264, 'reg_lambda': 4.318974012067407, 'class_weight': None}. Best is trial 5 with value: 0.5945399717231523.\n",
            "[I 2025-05-24 08:17:49,732] Trial 14 finished with value: 0.5898479352514499 and parameters: {'n_estimators': 3903, 'learning_rate': 0.000961900674929733, 'num_leaves': 39, 'max_depth': 15, 'min_child_samples': 122, 'subsample': 0.6679153492833169, 'colsample_bytree': 0.9726944693242783, 'reg_alpha': 4.336631779854973, 'reg_lambda': 0.051379031491456395, 'class_weight': None}. Best is trial 5 with value: 0.5945399717231523.\n",
            "[I 2025-05-24 08:17:54,707] Trial 15 finished with value: 0.5980153387488525 and parameters: {'n_estimators': 1632, 'learning_rate': 0.016003233559134796, 'num_leaves': 18, 'max_depth': 14, 'min_child_samples': 117, 'subsample': 0.5434258659759362, 'colsample_bytree': 0.9708857534307583, 'reg_alpha': 0.04216822686243416, 'reg_lambda': 0.14258629779695786, 'class_weight': None}. Best is trial 15 with value: 0.5980153387488525.\n",
            "[I 2025-05-24 08:17:57,896] Trial 16 finished with value: 0.5995802741406219 and parameters: {'n_estimators': 1392, 'learning_rate': 0.03574302636302338, 'num_leaves': 19, 'max_depth': 13, 'min_child_samples': 111, 'subsample': 0.5017554505458846, 'colsample_bytree': 0.8878978537551029, 'reg_alpha': 0.031124312412438036, 'reg_lambda': 0.08232396502733683, 'class_weight': None}. Best is trial 16 with value: 0.5995802741406219.\n",
            "[I 2025-05-24 08:18:00,009] Trial 17 finished with value: 0.597555900667187 and parameters: {'n_estimators': 1617, 'learning_rate': 0.03592073958160581, 'num_leaves': 12, 'max_depth': 14, 'min_child_samples': 119, 'subsample': 0.5107759371765088, 'colsample_bytree': 0.9048921775959685, 'reg_alpha': 0.02052327601488711, 'reg_lambda': 0.03402529099909108, 'class_weight': None}. Best is trial 16 with value: 0.5995802741406219.\n",
            "[I 2025-05-24 08:18:06,198] Trial 18 finished with value: 0.5883051898242599 and parameters: {'n_estimators': 1160, 'learning_rate': 0.006435119808878718, 'num_leaves': 39, 'max_depth': 6, 'min_child_samples': 112, 'subsample': 0.5625612396257696, 'colsample_bytree': 0.9945874011993847, 'reg_alpha': 0.03371163461200833, 'reg_lambda': 0.0011466896992659097, 'class_weight': None}. Best is trial 16 with value: 0.5995802741406219.\n",
            "[I 2025-05-24 08:18:08,462] Trial 19 finished with value: 0.6001005707401893 and parameters: {'n_estimators': 2193, 'learning_rate': 0.023598280153189134, 'num_leaves': 19, 'max_depth': 11, 'min_child_samples': 132, 'subsample': 0.5001223181871557, 'colsample_bytree': 0.7665945531638095, 'reg_alpha': 0.0066791837529510826, 'reg_lambda': 0.12581974296269532, 'class_weight': None}. Best is trial 19 with value: 0.6001005707401893.\n",
            "[I 2025-05-24 08:18:13,106] Trial 20 finished with value: 0.5902228363576059 and parameters: {'n_estimators': 2435, 'learning_rate': 0.0001405267506537937, 'num_leaves': 59, 'max_depth': 10, 'min_child_samples': 133, 'subsample': 0.5016575807646826, 'colsample_bytree': 0.6232259308126769, 'reg_alpha': 0.006038327999895969, 'reg_lambda': 0.026205111920517606, 'class_weight': None}. Best is trial 19 with value: 0.6001005707401893.\n",
            "[I 2025-05-24 08:18:16,549] Trial 21 finished with value: 0.5989288734797552 and parameters: {'n_estimators': 1591, 'learning_rate': 0.04877719170637415, 'num_leaves': 19, 'max_depth': 13, 'min_child_samples': 111, 'subsample': 0.5523027214410359, 'colsample_bytree': 0.760518759723437, 'reg_alpha': 0.07671859947295512, 'reg_lambda': 0.11922385959768084, 'class_weight': None}. Best is trial 19 with value: 0.6001005707401893.\n",
            "[I 2025-05-24 08:18:20,388] Trial 22 finished with value: 0.5894611766521541 and parameters: {'n_estimators': 1244, 'learning_rate': 0.0499490924781475, 'num_leaves': 34, 'max_depth': 11, 'min_child_samples': 86, 'subsample': 0.5821186385193101, 'colsample_bytree': 0.7475574463351211, 'reg_alpha': 0.08202744679428765, 'reg_lambda': 0.018491985574650073, 'class_weight': None}. Best is trial 19 with value: 0.6001005707401893.\n",
            "[I 2025-05-24 08:18:23,037] Trial 23 finished with value: 0.5959544264514198 and parameters: {'n_estimators': 2338, 'learning_rate': 0.02651897464673814, 'num_leaves': 20, 'max_depth': 13, 'min_child_samples': 109, 'subsample': 0.6256044036130899, 'colsample_bytree': 0.7704618147126067, 'reg_alpha': 0.009781392048280027, 'reg_lambda': 0.17555674844128205, 'class_weight': None}. Best is trial 19 with value: 0.6001005707401893.\n",
            "[I 2025-05-24 08:18:27,195] Trial 24 finished with value: 0.5890724109452257 and parameters: {'n_estimators': 1909, 'learning_rate': 0.008649880698686418, 'num_leaves': 80, 'max_depth': 11, 'min_child_samples': 134, 'subsample': 0.5570733809261784, 'colsample_bytree': 0.6499890963426002, 'reg_alpha': 0.18981686593117772, 'reg_lambda': 0.08579856339268865, 'class_weight': None}. Best is trial 19 with value: 0.6001005707401893.\n",
            "[I 2025-05-24 08:18:31,332] Trial 25 finished with value: 0.5951218513046306 and parameters: {'n_estimators': 2595, 'learning_rate': 0.02713637646711392, 'num_leaves': 12, 'max_depth': 13, 'min_child_samples': 59, 'subsample': 0.5267293538992643, 'colsample_bytree': 0.8717208541429594, 'reg_alpha': 0.0046870211651769125, 'reg_lambda': 0.5463531150862773, 'class_weight': None}. Best is trial 19 with value: 0.6001005707401893.\n",
            "[I 2025-05-24 08:18:33,986] Trial 26 finished with value: 0.5930504504446243 and parameters: {'n_estimators': 1142, 'learning_rate': 0.02438849698266541, 'num_leaves': 32, 'max_depth': 11, 'min_child_samples': 126, 'subsample': 0.9930985582496799, 'colsample_bytree': 0.6828778150427861, 'reg_alpha': 0.018490836823314507, 'reg_lambda': 1.0456538811774951, 'class_weight': 'balanced'}. Best is trial 19 with value: 0.6001005707401893.\n",
            "[I 2025-05-24 08:18:36,311] Trial 27 finished with value: 0.5967512170774119 and parameters: {'n_estimators': 3224, 'learning_rate': 0.04929003940147063, 'num_leaves': 10, 'max_depth': 14, 'min_child_samples': 100, 'subsample': 0.6866396224820128, 'colsample_bytree': 0.7890156732473281, 'reg_alpha': 0.1256385978016023, 'reg_lambda': 0.13657660236393243, 'class_weight': None}. Best is trial 19 with value: 0.6001005707401893.\n",
            "[I 2025-05-24 08:18:38,604] Trial 28 finished with value: 0.5872592300970777 and parameters: {'n_estimators': 1372, 'learning_rate': 0.013042911413306177, 'num_leaves': 22, 'max_depth': 5, 'min_child_samples': 84, 'subsample': 0.5041913713502769, 'colsample_bytree': 0.5364003864452325, 'reg_alpha': 0.04787277964273263, 'reg_lambda': 0.017440072329096036, 'class_weight': None}. Best is trial 19 with value: 0.6001005707401893.\n",
            "[I 2025-05-24 08:18:40,574] Trial 29 finished with value: 0.5988698367885934 and parameters: {'n_estimators': 2051, 'learning_rate': 0.004984390382616817, 'num_leaves': 17, 'max_depth': 10, 'min_child_samples': 138, 'subsample': 0.5671534863397407, 'colsample_bytree': 0.7136279476811905, 'reg_alpha': 0.014686572355303592, 'reg_lambda': 0.05962479608322746, 'class_weight': 'balanced'}. Best is trial 19 with value: 0.6001005707401893.\n",
            "[I 2025-05-24 08:18:47,926] Trial 30 finished with value: 0.5909327823829569 and parameters: {'n_estimators': 1900, 'learning_rate': 0.029511902755686204, 'num_leaves': 43, 'max_depth': 13, 'min_child_samples': 109, 'subsample': 0.6168698290763968, 'colsample_bytree': 0.876803922788442, 'reg_alpha': 0.00896859905139446, 'reg_lambda': 0.3431715398655188, 'class_weight': None}. Best is trial 19 with value: 0.6001005707401893.\n",
            "[I 2025-05-24 08:18:52,223] Trial 31 finished with value: 0.600447316359894 and parameters: {'n_estimators': 2175, 'learning_rate': 0.004563969282068956, 'num_leaves': 18, 'max_depth': 10, 'min_child_samples': 141, 'subsample': 0.5687172532920347, 'colsample_bytree': 0.6975859676937297, 'reg_alpha': 0.01713509598487288, 'reg_lambda': 0.05367490448057885, 'class_weight': 'balanced'}. Best is trial 31 with value: 0.600447316359894.\n",
            "[I 2025-05-24 08:18:56,124] Trial 32 finished with value: 0.5951980939384766 and parameters: {'n_estimators': 2245, 'learning_rate': 0.020402048297122333, 'num_leaves': 24, 'max_depth': 9, 'min_child_samples': 149, 'subsample': 0.5434220181952983, 'colsample_bytree': 0.6773664570293236, 'reg_alpha': 0.029249782828978606, 'reg_lambda': 0.04249567625907791, 'class_weight': 'balanced'}. Best is trial 31 with value: 0.600447316359894.\n",
            "[I 2025-05-24 08:18:58,524] Trial 33 finished with value: 0.5966927362055965 and parameters: {'n_estimators': 2716, 'learning_rate': 0.007558081634768013, 'num_leaves': 16, 'max_depth': 11, 'min_child_samples': 126, 'subsample': 0.5839428130923991, 'colsample_bytree': 0.7377028112975716, 'reg_alpha': 0.00633036034994241, 'reg_lambda': 0.08760679343267773, 'class_weight': 'balanced'}. Best is trial 31 with value: 0.600447316359894.\n",
            "[I 2025-05-24 08:19:02,206] Trial 34 finished with value: 0.5916518858849579 and parameters: {'n_estimators': 1755, 'learning_rate': 0.003955131438352657, 'num_leaves': 29, 'max_depth': 8, 'min_child_samples': 139, 'subsample': 0.5266717699918788, 'colsample_bytree': 0.7859049007360474, 'reg_alpha': 0.003567648899285149, 'reg_lambda': 0.19058323818078793, 'class_weight': 'balanced'}. Best is trial 31 with value: 0.600447316359894.\n",
            "[I 2025-05-24 08:19:05,327] Trial 35 finished with value: 0.5900110203331225 and parameters: {'n_estimators': 3231, 'learning_rate': 0.010665862909151141, 'num_leaves': 20, 'max_depth': 10, 'min_child_samples': 115, 'subsample': 0.541893511431054, 'colsample_bytree': 0.5440660946192546, 'reg_alpha': 0.056590195835070925, 'reg_lambda': 0.09882395738839579, 'class_weight': 'balanced'}. Best is trial 31 with value: 0.600447316359894.\n",
            "[I 2025-05-24 08:19:11,132] Trial 36 finished with value: 0.5884482913571121 and parameters: {'n_estimators': 1009, 'learning_rate': 0.0373746660557723, 'num_leaves': 49, 'max_depth': 13, 'min_child_samples': 101, 'subsample': 0.7624246025536204, 'colsample_bytree': 0.9156448129914281, 'reg_alpha': 0.023478573488097166, 'reg_lambda': 0.01899495956682643, 'class_weight': 'balanced'}. Best is trial 31 with value: 0.600447316359894.\n",
            "[I 2025-05-24 08:19:14,158] Trial 37 finished with value: 0.591285859576527 and parameters: {'n_estimators': 1416, 'learning_rate': 0.017211772759847067, 'num_leaves': 26, 'max_depth': 9, 'min_child_samples': 131, 'subsample': 0.5024388338704926, 'colsample_bytree': 0.6467208717332872, 'reg_alpha': 0.01363100403551625, 'reg_lambda': 0.4472927383150853, 'class_weight': 'balanced'}. Best is trial 31 with value: 0.600447316359894.\n",
            "[I 2025-05-24 08:19:24,017] Trial 38 finished with value: 0.5909953152151356 and parameters: {'n_estimators': 2486, 'learning_rate': 0.03667091289341672, 'num_leaves': 15, 'max_depth': 14, 'min_child_samples': 75, 'subsample': 0.7410507111116101, 'colsample_bytree': 0.5891267266073797, 'reg_alpha': 0.0023437162690338135, 'reg_lambda': 0.011606702888764225, 'class_weight': 'balanced'}. Best is trial 31 with value: 0.600447316359894.\n",
            "[I 2025-05-24 08:19:35,401] Trial 39 finished with value: 0.5901715154781371 and parameters: {'n_estimators': 2854, 'learning_rate': 0.01379312952377622, 'num_leaves': 32, 'max_depth': 12, 'min_child_samples': 92, 'subsample': 0.6445959963924199, 'colsample_bytree': 0.727613887351047, 'reg_alpha': 0.001023018912437719, 'reg_lambda': 0.23380715889410494, 'class_weight': None}. Best is trial 31 with value: 0.600447316359894.\n",
            "[I 2025-05-24 08:19:38,626] Trial 40 finished with value: 0.5750682600668053 and parameters: {'n_estimators': 2162, 'learning_rate': 0.02001036814784785, 'num_leaves': 60, 'max_depth': 7, 'min_child_samples': 10, 'subsample': 0.7158859252815505, 'colsample_bytree': 0.46158518725589853, 'reg_alpha': 0.12303881698906455, 'reg_lambda': 0.8096529388137599, 'class_weight': None}. Best is trial 31 with value: 0.600447316359894.\n",
            "[I 2025-05-24 08:19:40,805] Trial 41 finished with value: 0.5987933068474618 and parameters: {'n_estimators': 1877, 'learning_rate': 0.004920707866926107, 'num_leaves': 19, 'max_depth': 10, 'min_child_samples': 141, 'subsample': 0.5740037697677154, 'colsample_bytree': 0.7045186613693436, 'reg_alpha': 0.016517112591925488, 'reg_lambda': 0.06044517128360339, 'class_weight': 'balanced'}. Best is trial 31 with value: 0.600447316359894.\n",
            "[I 2025-05-24 08:19:42,645] Trial 42 finished with value: 0.597693054913772 and parameters: {'n_estimators': 2053, 'learning_rate': 0.005183369542200104, 'num_leaves': 10, 'max_depth': 10, 'min_child_samples': 141, 'subsample': 0.5630086692311635, 'colsample_bytree': 0.7894997354500606, 'reg_alpha': 0.011436746118267145, 'reg_lambda': 0.06410837268040855, 'class_weight': 'balanced'}. Best is trial 31 with value: 0.600447316359894.\n",
            "[I 2025-05-24 08:19:44,529] Trial 43 finished with value: 0.6003167351816218 and parameters: {'n_estimators': 2042, 'learning_rate': 0.002087362389068763, 'num_leaves': 16, 'max_depth': 11, 'min_child_samples': 123, 'subsample': 0.6042955008041461, 'colsample_bytree': 0.710737754420276, 'reg_alpha': 0.007075641139567065, 'reg_lambda': 0.11243303827881249, 'class_weight': 'balanced'}. Best is trial 31 with value: 0.600447316359894.\n",
            "[I 2025-05-24 08:19:48,672] Trial 44 finished with value: 0.5896419314998205 and parameters: {'n_estimators': 1474, 'learning_rate': 0.0005341831340839949, 'num_leaves': 22, 'max_depth': 11, 'min_child_samples': 107, 'subsample': 0.602661745943315, 'colsample_bytree': 0.7576666739353257, 'reg_alpha': 0.007507731836005424, 'reg_lambda': 0.12526879628354565, 'class_weight': 'balanced'}. Best is trial 31 with value: 0.600447316359894.\n",
            "[I 2025-05-24 08:19:50,696] Trial 45 finished with value: 0.5944459986611998 and parameters: {'n_estimators': 978, 'learning_rate': 0.0015711549442978803, 'num_leaves': 14, 'max_depth': 12, 'min_child_samples': 122, 'subsample': 0.5253937116952256, 'colsample_bytree': 0.8408565950181187, 'reg_alpha': 0.0037263759190866233, 'reg_lambda': 0.033282428256777685, 'class_weight': 'balanced'}. Best is trial 31 with value: 0.600447316359894.\n",
            "[I 2025-05-24 08:19:53,420] Trial 46 finished with value: 0.5961616255903655 and parameters: {'n_estimators': 1723, 'learning_rate': 0.0033196954192963126, 'num_leaves': 24, 'max_depth': 12, 'min_child_samples': 33, 'subsample': 0.7924309599201883, 'colsample_bytree': 0.6760422273888991, 'reg_alpha': 0.02795913504177942, 'reg_lambda': 0.11989705408482604, 'class_weight': 'balanced'}. Best is trial 31 with value: 0.600447316359894.\n",
            "[I 2025-05-24 08:19:56,358] Trial 47 finished with value: 0.5944123748052178 and parameters: {'n_estimators': 3030, 'learning_rate': 0.0021714019419470675, 'num_leaves': 19, 'max_depth': 13, 'min_child_samples': 97, 'subsample': 0.8661805637011059, 'colsample_bytree': 0.8117558439662624, 'reg_alpha': 0.06397398346948385, 'reg_lambda': 0.2711231523725262, 'class_weight': None}. Best is trial 31 with value: 0.600447316359894.\n",
            "[I 2025-05-24 08:20:03,570] Trial 48 finished with value: 0.5903915705677867 and parameters: {'n_estimators': 2312, 'learning_rate': 0.0011868244308531344, 'num_leaves': 30, 'max_depth': 11, 'min_child_samples': 122, 'subsample': 0.5982980370725501, 'colsample_bytree': 0.8560573051705799, 'reg_alpha': 0.002280278933908379, 'reg_lambda': 0.19842542147685663, 'class_weight': None}. Best is trial 31 with value: 0.600447316359894.\n",
            "[I 2025-05-24 08:20:17,520] Trial 49 finished with value: 0.585556556974911 and parameters: {'n_estimators': 1843, 'learning_rate': 0.0004603160679609675, 'num_leaves': 37, 'max_depth': 8, 'min_child_samples': 115, 'subsample': 0.5444514446139859, 'colsample_bytree': 0.9509839638629456, 'reg_alpha': 0.10885265490349093, 'reg_lambda': 0.04204716044368128, 'class_weight': 'balanced'}. Best is trial 31 with value: 0.600447316359894.\n",
            "INFO:root:Optuna study finished. Number of finished trials: 50\n",
            "INFO:root:Best trial average AUC (CV): 0.6004\n",
            "INFO:root:Best hyperparameters: {'n_estimators': 2175, 'learning_rate': 0.004563969282068956, 'num_leaves': 18, 'max_depth': 10, 'min_child_samples': 141, 'subsample': 0.5687172532920347, 'colsample_bytree': 0.6975859676937297, 'reg_alpha': 0.01713509598487288, 'reg_lambda': 0.05367490448057885, 'class_weight': 'balanced'}\n",
            "INFO:root:\n",
            "Training final LightGBM model with best hyperparameters found by Optuna...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training until validation scores don't improve for 150 rounds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:root:\n",
            "Final model training complete.\n",
            "INFO:root:\n",
            "Evaluating final model on the hold-out test set...\n",
            "INFO:root:Best iteration for final model: 128\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Early stopping, best iteration is:\n",
            "[128]\tvalid_0's auc: 0.578182\tvalid_0's binary_logloss: 0.677566\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:root:Optimal threshold for final model (F1-score class '1'): 0.42 (F1: 0.5857)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:root:\n",
            "Final Model Classification Report (Test Set, optimized threshold):\n",
            "INFO:root:\n",
            "Final Model Confusion Matrix (Test Set, optimized threshold):\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.84      0.06      0.11      4954\n",
            "           1       0.42      0.98      0.59      3389\n",
            "\n",
            "    accuracy                           0.44      8343\n",
            "   macro avg       0.63      0.52      0.35      8343\n",
            "weighted avg       0.67      0.44      0.31      8343\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:root:\n",
            "Final Model ROC AUC Score (Test Set): 0.5782\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x840 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:root:\n",
            "Saving optimized model and artifacts to: breakout_predictor_multi_optimized.pkl, optimal_threshold_multi_optimized.pkl, feature_list_multi_optimized.pkl\n",
            "INFO:root:Optimized model, threshold, and feature list saved successfully.\n",
            "INFO:root:\n",
            "IMPORTANT: Update ML artifact paths in Cell 6 (MLBreakoutStrategy) and Cell 7 (Backtest) to use:\n",
            "INFO:root:  ml_model_path='breakout_predictor_multi_optimized.pkl'\n",
            "INFO:root:  ml_threshold_path='optimal_threshold_multi_optimized.pkl'\n",
            "INFO:root:  ml_feature_list_path='feature_list_multi_optimized.pkl'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# %% [code] -- CELL 6: MLBreakoutStrategy Class Definition (Relaxed Constraints & Optimized Artifacts)\n",
        "\n",
        "import logging\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import time\n",
        "from datetime import datetime, timedelta\n",
        "import pytz\n",
        "import os\n",
        "import joblib\n",
        "\n",
        "from alpaca.data.historical import StockHistoricalDataClient\n",
        "from alpaca.data.requests import StockBarsRequest\n",
        "from alpaca.data.timeframe import TimeFrame, TimeFrameUnit\n",
        "\n",
        "# Ensure global constants are available from Cell 2 (e.g., NY_TZ, _G parameters)\n",
        "# Ensure EWM_pandas_global is available from Cell 4\n",
        "\n",
        "# --- Feature Calculation Function FOR STRATEGY (No Labeling) ---\n",
        "# (This function remains the same as provided in the previous \"f-string fix\" response)\n",
        "def calculate_features_for_strategy(df_stock_in, df_sector_aligned, df_vix_proxy_aligned):\n",
        "    if df_stock_in is None or df_stock_in.empty: return pd.DataFrame()\n",
        "    df = df_stock_in.copy()\n",
        "    required_stock_cols = ['open', 'high', 'low', 'close', 'volume']\n",
        "    if not all(col in df.columns for col in required_stock_cols): return pd.DataFrame()\n",
        "    for col in required_stock_cols: df[col] = pd.to_numeric(df[col], errors='coerce')\n",
        "    df.dropna(subset=required_stock_cols, inplace=True);\n",
        "    if df.empty: return pd.DataFrame()\n",
        "\n",
        "    df['returns_1'] = df['close'].pct_change(1)\n",
        "    df['returns_5'] = df['close'].pct_change(5)\n",
        "    df['returns_24'] = df['close'].pct_change(24)\n",
        "    df['high_lookback'] = df['high'].rolling(window=LOOKBACK_HIGH_PERIOD_G, min_periods=max(1,LOOKBACK_HIGH_PERIOD_G//2)).max().shift(1)\n",
        "    df['volume_avg_lookback'] = df['volume'].rolling(window=VOLUME_AVG_PERIOD_G, min_periods=max(1,VOLUME_AVG_PERIOD_G//2)).mean().shift(1)\n",
        "    df['is_breakout_candidate'] = 0\n",
        "    valid_breakout_conditions = (~df['high_lookback'].isnull()) & \\\n",
        "                                (~df['volume_avg_lookback'].isnull()) & \\\n",
        "                                (df['volume_avg_lookback'] > 0)\n",
        "    if valid_breakout_conditions.any(): # Ensure there's at least one valid row to operate on\n",
        "        df.loc[valid_breakout_conditions, 'is_breakout_candidate'] = \\\n",
        "            ((df.loc[valid_breakout_conditions, 'close'] > df.loc[valid_breakout_conditions, 'high_lookback']) & \\\n",
        "            (df.loc[valid_breakout_conditions, 'volume'] > 1.5 * df.loc[valid_breakout_conditions, 'volume_avg_lookback'])).astype(int)\n",
        "\n",
        "    delta = df['close'].diff(); gain = delta.where(delta > 0, 0.0); loss = -delta.where(delta < 0, 0.0)\n",
        "    avg_gain = EWM_pandas_global(gain, span=RSI_PERIOD_G*2-1 if RSI_PERIOD_G > 0 else 1, min_periods=RSI_PERIOD_G)\n",
        "    avg_loss = EWM_pandas_global(loss, span=RSI_PERIOD_G*2-1 if RSI_PERIOD_G > 0 else 1, min_periods=RSI_PERIOD_G)\n",
        "    rs_denominator = avg_loss.replace(0, 1e-9) + 1e-9; rs = avg_gain / rs_denominator\n",
        "    df['rsi'] = 100.0 - (100.0 / (1.0 + rs)); df['rsi'] = df['rsi'].fillna(50)\n",
        "    ema_fast = EWM_pandas_global(df['close'], span=MACD_FAST_G, min_periods=MACD_FAST_G//2)\n",
        "    ema_slow = EWM_pandas_global(df['close'], span=MACD_SLOW_G, min_periods=MACD_SLOW_G//2)\n",
        "    df['macd'] = ema_fast - ema_slow; df['macd_signal'] = EWM_pandas_global(df['macd'], span=MACD_SIGNAL_G, min_periods=MACD_SIGNAL_G//2)\n",
        "    df['macd_hist'] = df['macd'] - df['macd_signal']\n",
        "    df['h_minus_l'] = df['high'] - df['low']; df['h_minus_cp'] = abs(df['high'] - df['close'].shift(1)); df['l_minus_cp'] = abs(df['low'] - df['close'].shift(1))\n",
        "    df['true_range'] = df[['h_minus_l', 'h_minus_cp', 'l_minus_cp']].max(axis=1, skipna=False)\n",
        "    df['true_range'] = pd.to_numeric(df['true_range'], errors='coerce')\n",
        "    df['atr'] = EWM_pandas_global(df['true_range'], span=ATR_PERIOD_G*2-1 if ATR_PERIOD_G > 0 else 1, min_periods=ATR_PERIOD_G)\n",
        "    move_up = df['high'].diff(); move_down = -(df['low'].diff())\n",
        "    plus_dm = pd.Series(np.where((move_up > move_down) & (move_up > 0), move_up, 0.0), index=df.index)\n",
        "    minus_dm = pd.Series(np.where((move_down > move_up) & (move_down > 0), move_down, 0.0), index=df.index)\n",
        "    atr_for_di = df['atr'].replace(0, 1e-9).fillna(1e-9)\n",
        "    if not atr_for_di.isnull().all() and ADX_PERIOD_G > 0:\n",
        "        smooth_plus_dm = EWM_pandas_global(plus_dm, span=ADX_PERIOD_G*2-1, min_periods=ADX_PERIOD_G)\n",
        "        smooth_minus_dm = EWM_pandas_global(minus_dm, span=ADX_PERIOD_G*2-1, min_periods=ADX_PERIOD_G)\n",
        "        plus_di = 100.0 * (smooth_plus_dm / atr_for_di); minus_di = 100.0 * (smooth_minus_dm / atr_for_di)\n",
        "        dx_denominator = abs(plus_di + minus_di).replace(0,1e-9).fillna(1e-9)\n",
        "        dx = 100.0 * (abs(plus_di - minus_di) / dx_denominator)\n",
        "        df['adx_simplified'] = EWM_pandas_global(dx, span=ADX_PERIOD_G*2-1, min_periods=ADX_PERIOD_G)\n",
        "        df['adx_simplified'] = df['adx_simplified'].fillna(20)\n",
        "    else: df['adx_simplified'] = 20.0\n",
        "    tp = (df['high'] + df['low'] + df['close']) / 3.0\n",
        "    sma_tp = tp.rolling(window=CCI_PERIOD_G, min_periods=max(1,CCI_PERIOD_G//2)).mean()\n",
        "    mean_dev_abs = abs(tp - sma_tp); mean_dev = mean_dev_abs.rolling(window=CCI_PERIOD_G, min_periods=max(1,CCI_PERIOD_G//2)).mean()\n",
        "    df['cci'] = (tp - sma_tp) / (0.015 * (mean_dev.replace(0,1e-9).fillna(1e-9))); df['cci'] = df['cci'].fillna(0)\n",
        "    df['volatility_20_std'] = df['returns_1'].rolling(window=20, min_periods=10).std()\n",
        "    atr_safe_denominator = df['atr'].replace(0,1e-9).fillna(1e-9)\n",
        "    df['price_vs_high_norm'] = (df['close'] - df['high_lookback']) / atr_safe_denominator\n",
        "    df['price_vs_high_norm'].fillna(0, inplace=True)\n",
        "    if isinstance(df.index, pd.DatetimeIndex): df['hour'] = df.index.hour; df['dayofweek'] = df.index.dayofweek\n",
        "    else: temp_dt_index = pd.to_datetime(df.index, errors='coerce'); df['hour'] = temp_dt_index.hour; df['dayofweek'] = temp_dt_index.dayofweek\n",
        "    if df_sector_aligned is not None and not df_sector_aligned.empty and 'close' in df_sector_aligned.columns:\n",
        "        df_sector_close_numeric = pd.to_numeric(df_sector_aligned['close'], errors='coerce')\n",
        "        df_sector_close_aligned = df_sector_close_numeric.reindex(df.index, method='ffill')\n",
        "        df['sector_ma'] = df_sector_close_aligned.rolling(window=SECTOR_MA_PERIOD_G, min_periods=max(1,SECTOR_MA_PERIOD_G//2)).mean()\n",
        "        df['stock_vs_sector_ma'] = df['close'] / (df['sector_ma'].replace(0,1e-9).fillna(1e-9))\n",
        "        df['sector_above_ma'] = (df_sector_close_aligned > df['sector_ma']).astype(int)\n",
        "        df['sector_return_5'] = df_sector_close_aligned.pct_change(5)\n",
        "    else: df['sector_ma']=np.nan; df['stock_vs_sector_ma']=np.nan; df['sector_above_ma']=0; df['sector_return_5']=np.nan\n",
        "    if df_vix_proxy_aligned is not None and not df_vix_proxy_aligned.empty and 'close' in df_vix_proxy_aligned.columns:\n",
        "        df_vix_close_numeric = pd.to_numeric(df_vix_proxy_aligned['close'], errors='coerce')\n",
        "        df_vix_close_aligned = df_vix_close_numeric.reindex(df.index, method='ffill')\n",
        "        df['vix_close'] = df_vix_close_aligned\n",
        "        df['vix_ma'] = df_vix_close_aligned.rolling(window=VIX_PROXY_MA_PERIOD_G, min_periods=max(1,VIX_PROXY_MA_PERIOD_G//2)).mean()\n",
        "        df['vix_above_ma'] = (df_vix_close_aligned > df['vix_ma']).astype(int)\n",
        "        df['vix_above_threshold'] = (df_vix_close_aligned > VIX_PROXY_THRESHOLD_HIGH_G).astype(int)\n",
        "    else: df['vix_close']=np.nan; df['vix_ma']=np.nan; df['vix_above_ma']=0; df['vix_above_threshold']=0\n",
        "\n",
        "    df.replace([np.inf, -np.inf], np.nan, inplace=True)\n",
        "    return df\n",
        "\n",
        "\n",
        "class MLBreakoutStrategy:\n",
        "    def __init__(self, symbols_list, sector_etf_map, vix_ticker,\n",
        "                 # --- RELAXED Parameters for signal generation testing ---\n",
        "                 entry_lookback_rule=30,               # Shorter lookback for breakout\n",
        "                 volume_multiplier_rule=1.25,          # Lower volume confirmation needed\n",
        "                 trend_filter_period_rule=50,          # Shorter trend period\n",
        "                 atr_period_for_stop_rule=ATR_PERIOD_G, # Keep consistent with training feature\n",
        "                 sector_ma_period_filter=30,           # Shorter sector MA\n",
        "                 vix_threshold_high_filter=150,         # Higher VIXY threshold (allows trades in more volatile VIX env)\n",
        "                 # --- End RELAXED Parameters ---\n",
        "                 risk_per_trade=0.01,\n",
        "                 position_sizing_atr_multiplier=2.0, # Slightly tighter stop for testing\n",
        "                 ml_model_path='breakout_predictor_multi_optimized.pkl',\n",
        "                 ml_threshold_path='optimal_threshold_multi_optimized.pkl',\n",
        "                 ml_feature_list_path='feature_list_multi_optimized.pkl',\n",
        "                 api_key=None, api_secret=None, initial_cash=100000.0):\n",
        "\n",
        "        self.symbols = symbols_list\n",
        "        self.sector_etf_map = sector_etf_map\n",
        "        self.vix_proxy_ticker = vix_ticker\n",
        "\n",
        "        self.entry_lookback_rule = entry_lookback_rule\n",
        "        self.volume_multiplier_rule = volume_multiplier_rule\n",
        "        self.trend_filter_period_rule = trend_filter_period_rule\n",
        "        self.atr_period_for_stop_rule = atr_period_for_stop_rule # Should match global ATR_PERIOD_G if used in feature gen\n",
        "\n",
        "        self.risk_per_trade = risk_per_trade\n",
        "        self.position_sizing_atr_multiplier = position_sizing_atr_multiplier\n",
        "\n",
        "        self.sector_ma_period_filter = sector_ma_period_filter\n",
        "        self.vix_threshold_high_filter = vix_threshold_high_filter\n",
        "\n",
        "        self.cash = initial_cash\n",
        "        self.initial_portfolio_value = initial_cash\n",
        "        self.positions = {}\n",
        "        self.portfolio_value_history = []\n",
        "        self.trade_log = []\n",
        "        self.next_trade_id = 1\n",
        "\n",
        "        self.logger = logging.getLogger(self.__class__.__name__)\n",
        "        self.logger.setLevel(logging.INFO) # Set to INFO by default, can be overridden to DEBUG\n",
        "\n",
        "        try:\n",
        "            self.ml_model = joblib.load(ml_model_path)\n",
        "            # For testing, let's use a slightly lower threshold than the F1-optimized one if the model is weak\n",
        "            loaded_threshold = joblib.load(ml_threshold_path)\n",
        "            self.ml_optimal_threshold = max(0.30, loaded_threshold - 0.05) # e.g. if F1-opt was 0.42, try 0.37, but not below 0.30\n",
        "            self.logger.info(f\"Loaded ML optimal threshold: {loaded_threshold:.2f}, Adjusted for strategy: {self.ml_optimal_threshold:.2f}\")\n",
        "\n",
        "            self.ml_feature_names = joblib.load(ml_feature_list_path)\n",
        "            self.logger.info(f\"ML model ('{ml_model_path}'), adjusted threshold, and feature list loaded successfully.\")\n",
        "        except FileNotFoundError:\n",
        "            self.logger.error(f\"CRITICAL: ML artifact(s) not found. Checked path: '{ml_model_path}'. Ensure model is trained and paths are correct. ML predictions will be disabled.\")\n",
        "            self.ml_model = None; self.ml_optimal_threshold = 0.30; self.ml_feature_names = [] # Fallback if files not found\n",
        "        except Exception as e:\n",
        "            self.logger.error(f\"Failed to load ML artifacts ('{ml_model_path}'): {e}. ML predictions will be disabled.\")\n",
        "            self.ml_model = None; self.ml_optimal_threshold = 0.30; self.ml_feature_names = []\n",
        "\n",
        "        self.api_key = api_key\n",
        "        self.api_secret = api_secret\n",
        "        if api_key and api_secret and api_key != \"YOUR_ALPACA_API_KEY\":\n",
        "            self.stock_data_client = StockHistoricalDataClient(api_key, api_secret)\n",
        "            self.logger.info(\"Strategy: Alpaca client initialized.\")\n",
        "        else:\n",
        "            self.stock_data_client = None\n",
        "            self.logger.warning(\"Strategy: Alpaca API key/secret not provided or are placeholders.\")\n",
        "\n",
        "        # Ensure min_rows_for_features considers the potentially changed rule parameters\n",
        "        self.min_rows_for_features = max(\n",
        "            self.entry_lookback_rule, VOLUME_AVG_PERIOD_G, RSI_PERIOD_G,\n",
        "            MACD_SLOW_G + MACD_SIGNAL_G, self.atr_period_for_stop_rule, ADX_PERIOD_G, CCI_PERIOD_G,\n",
        "            self.sector_ma_period_filter, VIX_PROXY_MA_PERIOD_G,\n",
        "            self.trend_filter_period_rule\n",
        "        ) + 30 # Buffer for EWM/rolling functions to stabilize\n",
        "\n",
        "    def _format_value_for_log(self, value, precision=\".2f\"):\n",
        "        return f\"{value:{precision}}\" if not pd.isna(value) else \"NaN\"\n",
        "\n",
        "    def _calculate_rule_based_atr(self, df_stock_slice, period):\n",
        "        if df_stock_slice is None or df_stock_slice.empty or len(df_stock_slice) < period + 1: return np.nan\n",
        "        required_cols = ['high', 'low', 'close']\n",
        "        if not all(col in df_stock_slice.columns for col in required_cols): return np.nan\n",
        "        df = df_stock_slice.copy()\n",
        "        for col in required_cols: df[col] = pd.to_numeric(df[col], errors='coerce')\n",
        "        df.dropna(subset=required_cols, inplace=True)\n",
        "        if len(df) < period + 1: return np.nan\n",
        "        df['h_minus_l'] = df['high'] - df['low']\n",
        "        df['h_minus_cp'] = abs(df['high'] - df['close'].shift(1))\n",
        "        df['l_minus_cp'] = abs(df['low'] - df['close'].shift(1))\n",
        "        tr = df[['h_minus_l', 'h_minus_cp', 'l_minus_cp']].max(axis=1, skipna=False)\n",
        "        atr_series = tr.rolling(window=period, min_periods=max(1,int(period*0.8))).mean() # Ensure min_periods is reasonable\n",
        "        return atr_series.iloc[-1] if not atr_series.empty and not pd.isna(atr_series.iloc[-1]) else np.nan\n",
        "\n",
        "    def _get_ml_prediction(self, symbol, df_stock_slice, df_sector_slice, df_vix_proxy_slice, current_time):\n",
        "        if not self.ml_model or not self.ml_feature_names:\n",
        "            self.logger.debug(f\"[{symbol} @ {current_time.strftime('%F %T')}] ML model/features not loaded. Skipping.\")\n",
        "            return None\n",
        "        df_with_features = calculate_features_for_strategy(df_stock_slice, df_sector_slice, df_vix_proxy_slice)\n",
        "        if df_with_features.empty or df_with_features.index[-1] != current_time :\n",
        "            self.logger.warning(f\"[{symbol} @ {current_time.strftime('%F %T')}] Feature calc for ML failed/misaligned. Last idx: {df_with_features.index[-1] if not df_with_features.empty else 'N/A'}.\")\n",
        "            return None\n",
        "        latest_features_series = df_with_features.loc[current_time]\n",
        "        try:\n",
        "            features_for_model_df = pd.DataFrame([latest_features_series[self.ml_feature_names]], columns=self.ml_feature_names)\n",
        "        except KeyError as e:\n",
        "            self.logger.error(f\"[{symbol} @ {current_time.strftime('%F %T')}] ML Feature mismatch: {e}. Required: {self.ml_feature_names}. Available: {latest_features_series.index.tolist()}\")\n",
        "            return None\n",
        "        if features_for_model_df.isnull().any().any():\n",
        "            nan_cols = features_for_model_df.columns[features_for_model_df.isnull().any()].tolist()\n",
        "            self.logger.warning(f\"[{symbol} @ {current_time.strftime('%F %T')}] NaN values in features for ML: {nan_cols}. Skipping.\")\n",
        "            return None\n",
        "        try:\n",
        "            pred_proba_class1 = self.ml_model.predict_proba(features_for_model_df)[:, 1][0]\n",
        "            return pred_proba_class1\n",
        "        except Exception as e:\n",
        "            self.logger.error(f\"[{symbol} @ {current_time.strftime('%F %T')}] Error during ML predict_proba: {e}\")\n",
        "            return None\n",
        "\n",
        "    def calculate_signals_with_ml(self, symbol, historical_stock_data_full,\n",
        "                                  historical_sector_data_full, historical_vix_proxy_data_full,\n",
        "                                  current_time_in_backtest):\n",
        "        original_level = self.logger.level\n",
        "        # self.logger.setLevel(logging.DEBUG) # << UNCOMMENT THIS FOR EXTREME VERBOSITY TO DEBUG NO TRADES\n",
        "\n",
        "        self.logger.debug(f\"--- [{symbol} @ {current_time_in_backtest.strftime('%F %T')}] Calculating Signals ---\")\n",
        "\n",
        "        df_stock_decision_slice = historical_stock_data_full[historical_stock_data_full.index <= current_time_in_backtest]\n",
        "        df_sector_decision_slice = None\n",
        "        if historical_sector_data_full is not None and not historical_sector_data_full.empty:\n",
        "            df_sector_decision_slice = historical_sector_data_full[historical_sector_data_full.index <= current_time_in_backtest]\n",
        "        df_vix_proxy_decision_slice = None\n",
        "        if historical_vix_proxy_data_full is not None and not historical_vix_proxy_data_full.empty:\n",
        "            df_vix_proxy_decision_slice = historical_vix_proxy_data_full[historical_vix_proxy_data_full.index <= current_time_in_backtest]\n",
        "\n",
        "        if len(df_stock_decision_slice) < self.min_rows_for_features:\n",
        "            self.logger.debug(f\"[{symbol}] Data too short ({len(df_stock_decision_slice)} < {self.min_rows_for_features}). Holding.\")\n",
        "            self.logger.setLevel(original_level); return {'symbol': symbol, 'timestamp': current_time_in_backtest, 'price': np.nan, 'action': 'HOLD'}\n",
        "\n",
        "        latest_stock_data = df_stock_decision_slice.iloc[-1]\n",
        "        if pd.isna(latest_stock_data['close']):\n",
        "            self.logger.debug(f\"[{symbol}] Latest stock 'close' is NaN. Holding.\")\n",
        "            self.logger.setLevel(original_level); return {'symbol': symbol, 'timestamp': current_time_in_backtest, 'price': np.nan, 'action': 'HOLD'}\n",
        "\n",
        "        signal_output = {'symbol': symbol, 'timestamp': current_time_in_backtest, 'price': latest_stock_data['close'], 'action': 'HOLD'}\n",
        "\n",
        "        sector_trade_ok = True; sector_etf_ticker = self.sector_etf_map.get(symbol)\n",
        "        if df_sector_decision_slice is not None and not df_sector_decision_slice.empty and len(df_sector_decision_slice) >= self.sector_ma_period_filter:\n",
        "            latest_sector_close = pd.to_numeric(df_sector_decision_slice['close'].iloc[-1], errors='coerce')\n",
        "            sector_ma = pd.to_numeric(df_sector_decision_slice['close'].rolling(window=self.sector_ma_period_filter, min_periods=max(1, int(self.sector_ma_period_filter*0.8))).mean().iloc[-1], errors='coerce')\n",
        "            self.logger.debug(f\"[{symbol}] Sector Filter ({sector_etf_ticker}): Close={self._format_value_for_log(latest_sector_close)}, MA({self.sector_ma_period_filter})={self._format_value_for_log(sector_ma)}\")\n",
        "            if pd.isna(latest_sector_close) or pd.isna(sector_ma): sector_trade_ok = False; self.logger.debug(f\"[{symbol}] Sector Filter BLOCK (NaNs).\")\n",
        "            elif not (latest_sector_close > sector_ma): sector_trade_ok = False; self.logger.debug(f\"[{symbol}] Sector Filter BLOCK (ETF < MA).\")\n",
        "        elif sector_etf_ticker is not None: sector_trade_ok = False; self.logger.debug(f\"[{symbol}] Sector Filter BLOCK (Sector data {sector_etf_ticker} MISSING/EMPTY).\")\n",
        "        self.logger.debug(f\"[{symbol}] Sector OK: {sector_trade_ok}\")\n",
        "\n",
        "        vix_proxy_trade_ok = True\n",
        "        if df_vix_proxy_decision_slice is not None and not df_vix_proxy_decision_slice.empty:\n",
        "            latest_vix_proxy_close = pd.to_numeric(df_vix_proxy_decision_slice['close'].iloc[-1], errors='coerce')\n",
        "            self.logger.debug(f\"[{symbol}] VIX Proxy Filter ({self.vix_proxy_ticker}): Close={self._format_value_for_log(latest_vix_proxy_close)}, Threshold={self.vix_threshold_high_filter}\")\n",
        "            if pd.isna(latest_vix_proxy_close): vix_proxy_trade_ok = False; self.logger.debug(f\"[{symbol}] VIX Filter BLOCK (NaN VIXY).\")\n",
        "            elif latest_vix_proxy_close > self.vix_threshold_high_filter: vix_proxy_trade_ok = False; self.logger.debug(f\"[{symbol}] VIX Filter BLOCK (VIXY > Threshold).\")\n",
        "        elif self.vix_proxy_ticker: vix_proxy_trade_ok = False; self.logger.debug(f\"[{symbol}] VIX Filter BLOCK (VIX Proxy data {self.vix_proxy_ticker} MISSING/EMPTY).\")\n",
        "        self.logger.debug(f\"[{symbol}] VIX OK: {vix_proxy_trade_ok}\")\n",
        "\n",
        "        if not (sector_trade_ok and vix_proxy_trade_ok):\n",
        "            self.logger.debug(f\"[{symbol}] Market filters block trade. Holding.\")\n",
        "            self.logger.setLevel(original_level); return signal_output\n",
        "        self.logger.debug(f\"[{symbol}] Market Regime Filters PASSED.\")\n",
        "\n",
        "        breakout_level_rule = df_stock_decision_slice['high'].rolling(self.entry_lookback_rule, min_periods=max(1, int(self.entry_lookback_rule*0.8))).max().shift(1).iloc[-1]\n",
        "        volume_avg_rule = df_stock_decision_slice['volume'].rolling(VOLUME_AVG_PERIOD_G, min_periods=max(1, int(VOLUME_AVG_PERIOD_G*0.8))).mean().shift(1).iloc[-1] # Global const for consistency\n",
        "        ma_trend_rule = df_stock_decision_slice['close'].rolling(self.trend_filter_period_rule, min_periods=max(1, int(self.trend_filter_period_rule*0.8))).mean().iloc[-1]\n",
        "        atr_for_stop_setting = self._calculate_rule_based_atr(df_stock_decision_slice, self.atr_period_for_stop_rule)\n",
        "        self.logger.debug(f\"[{symbol}] Rule Indicators: Price={self._format_value_for_log(latest_stock_data['close'])}, BRLvl({self.entry_lookback_rule})={self._format_value_for_log(breakout_level_rule)}, \"\n",
        "                          f\"Vol={self._format_value_for_log(latest_stock_data['volume'], '.0f')}, VolAvg({VOLUME_AVG_PERIOD_G})={self._format_value_for_log(volume_avg_rule, '.0f')}, \"\n",
        "                          f\"MATrend({self.trend_filter_period_rule})={self._format_value_for_log(ma_trend_rule)}, ATR({self.atr_period_for_stop_rule})={self._format_value_for_log(atr_for_stop_setting, '.3f')}\")\n",
        "\n",
        "        if pd.isna(breakout_level_rule) or pd.isna(volume_avg_rule) or volume_avg_rule < 1e-6 or \\\n",
        "           pd.isna(ma_trend_rule) or pd.isna(atr_for_stop_setting) or atr_for_stop_setting < 1e-6 :\n",
        "            self.logger.debug(f\"[{symbol}] Rule indicators NaN/Invalid. Holding.\")\n",
        "            self.logger.setLevel(original_level); return signal_output\n",
        "\n",
        "        is_breakout_rule = latest_stock_data['close'] > breakout_level_rule\n",
        "        is_volume_confirmed_rule = latest_stock_data['volume'] > self.volume_multiplier_rule * volume_avg_rule\n",
        "        is_uptrend_rule = latest_stock_data['close'] > ma_trend_rule\n",
        "        self.logger.debug(f\"[{symbol}] Rule Checks: Breakout={is_breakout_rule}, VolumeOK={is_volume_confirmed_rule} (Need > {self.volume_multiplier_rule * volume_avg_rule:.0f}), TrendOK={is_uptrend_rule}\")\n",
        "        base_signal_valid_by_rules = is_breakout_rule and is_volume_confirmed_rule and is_uptrend_rule\n",
        "        self.logger.debug(f\"[{symbol}] Base Signal Valid by Rules: {base_signal_valid_by_rules}\")\n",
        "\n",
        "        if base_signal_valid_by_rules and symbol not in self.positions:\n",
        "            self.logger.info(f\"[{symbol}] BASE RULES MET! Consulting ML...\")\n",
        "            if self.ml_model:\n",
        "                ml_prob_success = self._get_ml_prediction(symbol, df_stock_decision_slice, df_sector_decision_slice, df_vix_proxy_decision_slice, current_time_in_backtest)\n",
        "                if ml_prob_success is not None:\n",
        "                    self.logger.info(f\"[{symbol}] ML Prob Success: {ml_prob_success:.4f} (Adjusted Threshold: {self.ml_optimal_threshold:.2f})\")\n",
        "                    if ml_prob_success >= self.ml_optimal_threshold:\n",
        "                        self.logger.info(f\"!!!!!! [{symbol}] ML CONFIRMS BUY !!!!!!\")\n",
        "                        signal_output['action'] = 'BUY'\n",
        "                    else: self.logger.info(f\"[{symbol}] ML REJECTS BUY (Prob < Adjusted Threshold).\")\n",
        "                else: self.logger.warning(f\"[{symbol}] Could not get ML prediction. Defaulting to HOLD.\")\n",
        "            else:\n",
        "                self.logger.info(f\"[{symbol}] No ML model. Rule-based BUY signal generated as rules were met.\")\n",
        "                signal_output['action'] = 'BUY'\n",
        "        elif symbol in self.positions and base_signal_valid_by_rules:\n",
        "             self.logger.debug(f\"[{symbol}] Base rules met, but already in position.\")\n",
        "\n",
        "        if signal_output['action'] == 'BUY':\n",
        "            stop_price = latest_stock_data['close'] - (self.position_sizing_atr_multiplier * atr_for_stop_setting)\n",
        "            signal_output['stop_price'] = stop_price\n",
        "            signal_output['atr_for_sizing'] = atr_for_stop_setting\n",
        "            self.logger.debug(f\"[{symbol}] BUY signal generated. Price: {self._format_value_for_log(latest_stock_data['close'])}, Stop: {self._format_value_for_log(stop_price)}, ATR: {self._format_value_for_log(atr_for_stop_setting, '.3f')}\")\n",
        "\n",
        "        self.logger.setLevel(original_level)\n",
        "        return signal_output\n",
        "\n",
        "    # Other methods (get_historical_data_for_backtest, execute_trade, _close_position, check_stop_loss, calculate_portfolio_value, run_backtest)\n",
        "    # remain the same as in the \"f-string fix\" version. For brevity, not repeated here, but they should be part of the full class.\n",
        "    # Ensure they are copied correctly from the previous complete Cell 6.\n",
        "    # ... (Make sure to include all other methods from the previous complete Cell 6 here) ...\n",
        "    def get_historical_data_for_backtest(self, symbol, start_date_obj, end_date_obj, timeframe_obj):\n",
        "        if not self.stock_data_client:\n",
        "            self.logger.error(f\"Strategy: Alpaca client not available for fetching {symbol}.\")\n",
        "            return pd.DataFrame()\n",
        "        start_dt_aware = NY_TZ.localize(datetime.combine(start_date_obj, datetime.min.time()))\n",
        "        end_dt_aware = NY_TZ.localize(datetime.combine(end_date_obj, datetime.max.time()))\n",
        "        request_params = StockBarsRequest(\n",
        "            symbol_or_symbols=[symbol], timeframe=timeframe_obj, start=start_dt_aware,\n",
        "            end=end_dt_aware, adjustment='all', feed='iex'\n",
        "        )\n",
        "        try:\n",
        "            bars_response = self.stock_data_client.get_stock_bars(request_params)\n",
        "            if bars_response and bars_response.data and symbol in bars_response.data:\n",
        "                symbol_bars_data = bars_response.data[symbol]\n",
        "                if symbol_bars_data:\n",
        "                    records = [{'timestamp': bar.timestamp, 'open': bar.open, 'high': bar.high, 'low': bar.low, 'close': bar.close, 'volume': bar.volume} for bar in symbol_bars_data]\n",
        "                    df = pd.DataFrame.from_records(records).set_index('timestamp')\n",
        "                    df.index = pd.to_datetime(df.index, utc=True).tz_convert(NY_TZ)\n",
        "                    cols_to_convert = ['open', 'high', 'low', 'close', 'volume']\n",
        "                    for col in cols_to_convert: df[col] = pd.to_numeric(df[col], errors='coerce')\n",
        "                    df = df[cols_to_convert].copy()\n",
        "                    df.dropna(subset=['open','high','low','close'], inplace=True)\n",
        "                    return df\n",
        "            self.logger.warning(f\"Strategy: No data returned for {symbol} from Alpaca for period {start_date_obj} to {end_date_obj}.\")\n",
        "            return pd.DataFrame()\n",
        "        except Exception as e:\n",
        "            self.logger.error(f\"Strategy: Error fetching historical data for {symbol}: {e}\", exc_info=False)\n",
        "            return pd.DataFrame()\n",
        "\n",
        "    def execute_trade(self, signal_info):\n",
        "        symbol = signal_info['symbol']\n",
        "        action = signal_info['action']\n",
        "        current_price = signal_info['price']\n",
        "        timestamp = signal_info['timestamp']\n",
        "        if action == 'BUY' and symbol not in self.positions:\n",
        "            atr_for_sizing = signal_info.get('atr_for_sizing')\n",
        "            stop_price = signal_info.get('stop_price')\n",
        "            if not (atr_for_sizing and atr_for_sizing > 1e-6 and stop_price and stop_price < current_price):\n",
        "                self.logger.warning(f\"[{symbol} @ {timestamp.strftime('%F %T')}] Invalid ATR ({atr_for_sizing}) or SL ({stop_price}) for BUY. Aborted.\")\n",
        "                return\n",
        "            current_portfolio_value = self.cash + sum(pos['qty'] * self.positions[s]['avg_entry_price'] for s, pos in self.positions.items())\n",
        "            amount_to_risk = current_portfolio_value * self.risk_per_trade\n",
        "            dollars_per_share_at_risk = current_price - stop_price\n",
        "            if dollars_per_share_at_risk <= 1e-6 :\n",
        "                self.logger.warning(f\"[{symbol} @ {timestamp.strftime('%F %T')}] $ per share at risk too small ({dollars_per_share_at_risk}). Aborted.\")\n",
        "                return\n",
        "            num_shares_to_buy = int(amount_to_risk / dollars_per_share_at_risk)\n",
        "            if num_shares_to_buy <= 0:\n",
        "                self.logger.info(f\"[{symbol} @ {timestamp.strftime('%F %T')}] Calculated shares {num_shares_to_buy}. No trade.\")\n",
        "                return\n",
        "            cost_of_trade = num_shares_to_buy * current_price\n",
        "            if self.cash >= cost_of_trade:\n",
        "                self.cash -= cost_of_trade\n",
        "                self.positions[symbol] = {\n",
        "                    'qty': num_shares_to_buy, 'avg_entry_price': current_price,\n",
        "                    'entry_time': timestamp, 'trade_id': self.next_trade_id, 'stop_price': stop_price\n",
        "                }\n",
        "                self.trade_log.append({\n",
        "                    'trade_id': self.next_trade_id, 'timestamp_entry': timestamp, 'symbol': symbol,\n",
        "                    'type': 'BUY', 'shares': num_shares_to_buy, 'price_entry': current_price,\n",
        "                    'initial_stop_price': stop_price, 'status': 'OPEN',\n",
        "                    'timestamp_exit': None, 'price_exit': None, 'pnl': None, 'reason_exit': None\n",
        "                })\n",
        "                self.logger.info(f\"[BACKTEST @ {timestamp.strftime('%F %T')}] BOUGHT {num_shares_to_buy} {symbol} @ ${current_price:.2f}. SL: ${stop_price:.2f}. Cash: ${self.cash:.2f}\")\n",
        "                self.next_trade_id += 1\n",
        "            else:\n",
        "                self.logger.info(f\"[{symbol} @ {timestamp.strftime('%F %T')}] Insufficient cash ({self.cash:.2f}) for cost ({cost_of_trade:.2f}).\")\n",
        "\n",
        "    def _close_position(self, symbol, exit_price, exit_timestamp, reason=\"Unknown\"):\n",
        "        if symbol in self.positions:\n",
        "            pos_details = self.positions[symbol]\n",
        "            qty, entry_price, trade_id = pos_details['qty'], pos_details['avg_entry_price'], pos_details['trade_id']\n",
        "            pnl = (exit_price - entry_price) * qty\n",
        "            self.cash += qty * exit_price\n",
        "            self.logger.info(f\"[BACKTEST @ {exit_timestamp.strftime('%F %T')}] {reason.upper()} {symbol}: Sold {qty} @ ${exit_price:.2f}. Entry: ${entry_price:.2f}. P&L: ${pnl:.2f}. Cash: ${self.cash:.2f}\")\n",
        "            for trade_entry in self.trade_log:\n",
        "                if trade_entry['trade_id'] == trade_id and trade_entry['status'] == 'OPEN':\n",
        "                    trade_entry.update({\n",
        "                        'timestamp_exit': exit_timestamp, 'price_exit': exit_price,\n",
        "                        'pnl': pnl, 'reason_exit': reason, 'status': 'CLOSED'\n",
        "                    }); break\n",
        "            del self.positions[symbol]\n",
        "            return pnl\n",
        "        return 0\n",
        "\n",
        "    def check_stop_loss(self, current_prices_dict, current_time):\n",
        "        for sym in list(self.positions.keys()):\n",
        "            position = self.positions.get(sym)\n",
        "            if not position: continue\n",
        "            current_price_for_symbol = current_prices_dict.get(sym)\n",
        "            if current_price_for_symbol is None or pd.isna(current_price_for_symbol):\n",
        "                continue\n",
        "            if current_price_for_symbol <= position['stop_price']:\n",
        "                self.logger.info(f\"[{sym} @ {current_time.strftime('%F %T')}] STOP LOSS. Price {current_price_for_symbol:.2f} <= SL {position['stop_price']:.2f}\")\n",
        "                self._close_position(sym, current_price_for_symbol, current_time, reason=\"STOP LOSS\")\n",
        "\n",
        "    def calculate_portfolio_value(self, current_prices_dict):\n",
        "        value = self.cash\n",
        "        for symbol, details in self.positions.items():\n",
        "            current_price = current_prices_dict.get(symbol, details['avg_entry_price'])\n",
        "            if pd.isna(current_price): current_price = details['avg_entry_price']\n",
        "            value += details['qty'] * current_price\n",
        "        return value\n",
        "\n",
        "    def run_backtest(self, trading_symbols_list, backtest_start_date, backtest_end_date, backtest_timeframe):\n",
        "        self.logger.info(f\"Starting backtest for {', '.join(trading_symbols_list)} from {backtest_start_date} to {backtest_end_date} ({backtest_timeframe}).\")\n",
        "        self.cash = self.initial_portfolio_value; self.positions.clear(); self.portfolio_value_history = []\n",
        "        self.trade_log = []; self.next_trade_id = 1\n",
        "\n",
        "        all_historical_data_for_backtest = {}\n",
        "        unique_sector_etfs_in_use = list(set(self.sector_etf_map.get(s) for s in trading_symbols_list if self.sector_etf_map.get(s)))\n",
        "        symbols_for_hourly_fetch = list(set(trading_symbols_list + unique_sector_etfs_in_use))\n",
        "\n",
        "        # Calculate buffer days based on the longest lookback needed by any indicator used in the STRATEGY\n",
        "        # self.min_rows_for_features (calculated in __init__) considers strategy parameters\n",
        "        buffer_days_strat = (self.min_rows_for_features // (8 if backtest_timeframe == TimeFrame.Hour else 1)) + 90 # Approx trading hours per day, + safety margin\n",
        "\n",
        "        fetch_start_date_hourly = backtest_start_date - timedelta(days=int(buffer_days_strat * 1.5)) # Calendar days approx\n",
        "        fetch_start_date_daily = backtest_start_date - timedelta(days=int(buffer_days_strat * 1.5) + 30) # Extra for daily VIXY MAs\n",
        "\n",
        "        if self.stock_data_client:\n",
        "            if symbols_for_hourly_fetch:\n",
        "                self.logger.info(f\"Fetching HOURLY data for: {', '.join(symbols_for_hourly_fetch)} from {fetch_start_date_hourly} to {backtest_end_date}\")\n",
        "                for sym in symbols_for_hourly_fetch:\n",
        "                    df_sym = self.get_historical_data_for_backtest(sym, fetch_start_date_hourly, backtest_end_date, backtest_timeframe)\n",
        "                    if not df_sym.empty: all_historical_data_for_backtest[sym] = df_sym\n",
        "                    else: self.logger.warning(f\"No hourly data fetched for {sym}\")\n",
        "                    time.sleep(0.15)\n",
        "            if self.vix_proxy_ticker:\n",
        "                self.logger.info(f\"Fetching DAILY data for VIX Proxy: {self.vix_proxy_ticker} from {fetch_start_date_daily} to {backtest_end_date}\")\n",
        "                df_vix = self.get_historical_data_for_backtest(self.vix_proxy_ticker, fetch_start_date_daily, backtest_end_date, TimeFrame.Day)\n",
        "                if not df_vix.empty: all_historical_data_for_backtest[self.vix_proxy_ticker] = df_vix\n",
        "                else: self.logger.warning(f\"No daily data fetched for VIX Proxy {self.vix_proxy_ticker}\")\n",
        "        else:\n",
        "             if 'aligned_market_data' in globals() and isinstance(aligned_market_data, dict):\n",
        "                 all_historical_data_for_backtest = {k:v.copy() for k,v in aligned_market_data.items() if isinstance(v, pd.DataFrame) and not v.empty}\n",
        "                 self.logger.info(\"Using globally available 'aligned_market_data' for backtest due to no client in strategy.\")\n",
        "             else:\n",
        "                 self.logger.error(\"No Alpaca client in strategy and no suitable pre-loaded 'aligned_market_data' found. Backtest cannot proceed.\")\n",
        "                 return None\n",
        "\n",
        "        if not any(s in all_historical_data_for_backtest and not all_historical_data_for_backtest[s].empty for s in trading_symbols_list):\n",
        "            self.logger.error(\"CRITICAL: No historical data obtained for ANY TRADING SYMBOLS. Backtest cannot proceed.\")\n",
        "            return None\n",
        "\n",
        "        self.logger.info(\"Aligning data & creating master timeline...\")\n",
        "        master_simulation_index = None; temp_sim_indices = []\n",
        "        for sym in trading_symbols_list:\n",
        "            if sym in all_historical_data_for_backtest and not all_historical_data_for_backtest[sym].empty:\n",
        "                df_sym_data = all_historical_data_for_backtest[sym]\n",
        "                if isinstance(df_sym_data.index, pd.DatetimeIndex):\n",
        "                    # Ensure timezone consistency for filtering master index\n",
        "                    start_ts_aware = pd.Timestamp(backtest_start_date, tz=NY_TZ.zone) if df_sym_data.index.tz else pd.Timestamp(backtest_start_date)\n",
        "                    end_ts_aware = pd.Timestamp(backtest_end_date, tz=NY_TZ.zone) if df_sym_data.index.tz else pd.Timestamp(backtest_end_date)\n",
        "\n",
        "                    df_sym_in_sim_range = df_sym_data[\n",
        "                        (df_sym_data.index.normalize() >= start_ts_aware.normalize()) &\n",
        "                        (df_sym_data.index.normalize() <= end_ts_aware.normalize())\n",
        "                    ]\n",
        "                    if not df_sym_in_sim_range.empty: temp_sim_indices.append(df_sym_in_sim_range.index)\n",
        "                else: self.logger.warning(f\"Index for {sym} is not DatetimeIndex, cannot filter by date for master index.\")\n",
        "\n",
        "        if temp_sim_indices:\n",
        "            master_simulation_index = temp_sim_indices[0]\n",
        "            for idx in temp_sim_indices[1:]: master_simulation_index = master_simulation_index.union(idx)\n",
        "            master_simulation_index = master_simulation_index.sort_values().unique()\n",
        "            self.logger.info(f\"Master simulation timeline: {len(master_simulation_index)} timestamps for {backtest_start_date} to {backtest_end_date}.\")\n",
        "        else:\n",
        "            self.logger.error(\"Failed to create master simulation timeline. Halting.\"); return None\n",
        "\n",
        "        aligned_data_for_simulation_access = {}\n",
        "        for symbol, df_original_full_hist in all_historical_data_for_backtest.items():\n",
        "            if df_original_full_hist.empty: continue\n",
        "            if isinstance(df_original_full_hist.index, pd.DatetimeIndex):\n",
        "                aligned_data_for_simulation_access[symbol] = df_original_full_hist.reindex(master_simulation_index, method='ffill')\n",
        "            else: self.logger.warning(f\"Cannot align {symbol} as its index is not DatetimeIndex.\")\n",
        "\n",
        "        self.logger.info(f\"Starting main backtest loop over {len(master_simulation_index)} timestamps...\")\n",
        "        last_known_prices = {}; peak_portfolio_value = self.initial_portfolio_value; max_drawdown = 0.0\n",
        "\n",
        "        for i, current_sim_time in enumerate(master_simulation_index):\n",
        "            current_prices_this_tick = {}\n",
        "            for sym_iter_data_key in (trading_symbols_list + unique_sector_etfs_in_use + ([self.vix_proxy_ticker] if self.vix_proxy_ticker else [])):\n",
        "                if sym_iter_data_key in aligned_data_for_simulation_access and \\\n",
        "                   aligned_data_for_simulation_access[sym_iter_data_key] is not None and \\\n",
        "                   not aligned_data_for_simulation_access[sym_iter_data_key].empty:\n",
        "                    if current_sim_time in aligned_data_for_simulation_access[sym_iter_data_key].index:\n",
        "                        price = aligned_data_for_simulation_access[sym_iter_data_key].loc[current_sim_time, 'close']\n",
        "                        if not pd.isna(price):\n",
        "                            current_prices_this_tick[sym_iter_data_key] = price\n",
        "                            last_known_prices[sym_iter_data_key] = price\n",
        "            for sym_needed in self.positions.keys():\n",
        "                 if sym_needed not in current_prices_this_tick and sym_needed in last_known_prices:\n",
        "                      current_prices_this_tick[sym_needed] = last_known_prices[sym_needed]\n",
        "\n",
        "            self.check_stop_loss(current_prices_this_tick, current_sim_time)\n",
        "\n",
        "            for trade_symbol in trading_symbols_list:\n",
        "                if trade_symbol not in self.positions:\n",
        "                    hist_stock_bt_full = all_historical_data_for_backtest.get(trade_symbol)\n",
        "                    sec_ticker_bt = self.sector_etf_map.get(trade_symbol)\n",
        "                    hist_sec_bt_full = all_historical_data_for_backtest.get(sec_ticker_bt) if sec_ticker_bt else None\n",
        "                    hist_vix_bt_full = all_historical_data_for_backtest.get(self.vix_proxy_ticker) if self.vix_proxy_ticker else None\n",
        "                    if hist_stock_bt_full is None or hist_stock_bt_full.empty: continue\n",
        "                    signal = self.calculate_signals_with_ml(trade_symbol, hist_stock_bt_full,\n",
        "                                                            hist_sec_bt_full, hist_vix_bt_full, current_sim_time)\n",
        "                    if signal and signal['action'] == 'BUY' and not pd.isna(signal['price']):\n",
        "                        self.execute_trade(signal)\n",
        "\n",
        "            portfolio_val_at_tick = self.calculate_portfolio_value(current_prices_this_tick)\n",
        "            self.portfolio_value_history.append({'timestamp': current_sim_time, 'portfolio_value': portfolio_val_at_tick})\n",
        "            if portfolio_val_at_tick > peak_portfolio_value: peak_portfolio_value = portfolio_val_at_tick\n",
        "            current_drawdown = (peak_portfolio_value - portfolio_val_at_tick) / peak_portfolio_value if peak_portfolio_value > 1e-9 else 0\n",
        "            if current_drawdown > max_drawdown: max_drawdown = current_drawdown\n",
        "\n",
        "            if i % (len(master_simulation_index) // 20 or 1) == 0 or i == len(master_simulation_index) - 1 :\n",
        "                active_pos_str = \",\".join([f\"{s}({p['qty']})\" for s,p in self.positions.items()]) or \"None\"\n",
        "                self.logger.info(f\"[SIM PROGRESS @ {current_sim_time.strftime('%F %T')}] PV: ${portfolio_val_at_tick:,.2f}, MaxDD: {max_drawdown*100:.2f}%, Pos: [{active_pos_str}]\")\n",
        "\n",
        "        self.logger.info(\"Main backtest simulation loop finished.\"); self.logger.info(\"Liquidating any open positions...\")\n",
        "        final_liquidation_timestamp = master_simulation_index[-1] if not master_simulation_index.empty else datetime.now(NY_TZ)\n",
        "        liquidation_prices = last_known_prices.copy()\n",
        "        for s_liq in list(self.positions.keys()):\n",
        "            exit_price_liq = liquidation_prices.get(s_liq, self.positions[s_liq]['avg_entry_price'])\n",
        "            if pd.isna(exit_price_liq): exit_price_liq = self.positions[s_liq]['avg_entry_price']\n",
        "            self._close_position(s_liq, exit_price_liq, final_liquidation_timestamp, \"END LIQUIDATION\")\n",
        "\n",
        "        final_portfolio_value = self.cash; total_pnl = final_portfolio_value - self.initial_portfolio_value\n",
        "        total_return_pct = (total_pnl / self.initial_portfolio_value) * 100 if self.initial_portfolio_value != 0 else 0\n",
        "        num_entry_trades = len([t for t in self.trade_log if t['type']=='BUY'])\n",
        "        closed_trades = [t for t in self.trade_log if t['status']=='CLOSED' and t['pnl'] is not None]; num_closed_trades = len(closed_trades)\n",
        "        winning_trades = [t for t in closed_trades if t['pnl'] > 0]; losing_trades = [t for t in closed_trades if t['pnl'] <= 0]\n",
        "        num_winning_trades = len(winning_trades); num_losing_trades = len(losing_trades)\n",
        "        win_rate_pct = (num_winning_trades / num_closed_trades) * 100 if num_closed_trades > 0 else 0\n",
        "        total_profit_from_wins = sum(t['pnl'] for t in winning_trades); total_loss_from_losses = sum(t['pnl'] for t in losing_trades)\n",
        "        avg_profit_per_win = total_profit_from_wins / num_winning_trades if num_winning_trades > 0 else 0\n",
        "        avg_loss_per_loss = total_loss_from_losses / num_losing_trades if num_losing_trades > 0 else 0\n",
        "        profit_factor = abs(total_profit_from_wins / total_loss_from_losses) if total_loss_from_losses != 0 else float('inf')\n",
        "        avg_pnl_per_trade = total_pnl / num_closed_trades if num_closed_trades > 0 else 0\n",
        "        summary = {\n",
        "            \"Backtest Period Start\": backtest_start_date.strftime('%Y-%m-%d'), \"Backtest Period End\": backtest_end_date.strftime('%Y-%m-%d'),\n",
        "            \"Initial Portfolio Value\": f\"${self.initial_portfolio_value:,.2f}\", \"Final Portfolio Value\": f\"${final_portfolio_value:,.2f}\",\n",
        "            \"Total Net P&L\": f\"${total_pnl:,.2f}\", \"Total Return (%)\": f\"{total_return_pct:.2f}%\",\n",
        "            \"Max Drawdown (%)\": f\"{max_drawdown * 100:.2f}%\", \"Total Entry Signals\": num_entry_trades,\n",
        "            \"Total Closed Trades\": num_closed_trades, \"Winning Trades\": num_winning_trades, \"Losing Trades\": num_losing_trades,\n",
        "            \"Win Rate (Closed Trades, %)\": f\"{win_rate_pct:.2f}%\", \"Average P&L per Closed Trade\": f\"${avg_pnl_per_trade:,.2f}\",\n",
        "            \"Average Profit per Winning Trade\": f\"${avg_profit_per_win:,.2f}\", \"Average Loss per Losing Trade\": f\"${avg_loss_per_loss:,.2f}\",\n",
        "            \"Profit Factor\": f\"{profit_factor:.2f}\"\n",
        "        }\n",
        "        summary_log_lines = [f\"{'='*25} BACKTEST SUMMARY (ML Strategy) {'='*25}\"]\n",
        "        for k, v in summary.items(): summary_log_lines.append(f\"{k:<35}: {v}\")\n",
        "        summary_log_lines.append(\"=\"*70); self.logger.info(\"\\n\" + \"\\n\".join(summary_log_lines))\n",
        "        results_dict = {\n",
        "            \"portfolio_history\": pd.DataFrame(self.portfolio_value_history) if self.portfolio_value_history else pd.DataFrame(),\n",
        "            \"trade_log\": pd.DataFrame(self.trade_log) if self.trade_log else pd.DataFrame(),\n",
        "            \"summary_metrics\": summary\n",
        "        }\n",
        "        return results_dict\n",
        "\n",
        "print(\"MLBreakoutStrategy class defined with relaxed constraints for signal generation testing.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vo1Ho4OQPfON",
        "outputId": "984ace64-bfa0-4d56-a2af-70d2dabbe5e1"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MLBreakoutStrategy class defined with relaxed constraints for signal generation testing.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# %% [code] -- CELL 7: Run Backtest (Single Symbol, VIX Filter Bypassed via High Threshold)\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Ensure Alpaca credentials and client are available\n",
        "# ... (Standard checks as in previous Cell 7, ensure logger is also set up) ...\n",
        "# Ensure global feature parameters and EWM_pandas_global are defined\n",
        "# ... (Standard checks as in previous Cell 7) ...\n",
        "\n",
        "# --- Backtest Configuration for a SINGLE SYMBOL ---\n",
        "SINGLE_TRADING_SYMBOL = ['GOOGL']\n",
        "if 'SECTOR_ETF_MAP' not in globals() or SINGLE_TRADING_SYMBOL[0] not in SECTOR_ETF_MAP:\n",
        "    logger.error(f\"SECTOR_ETF_MAP not defined or no mapping for {SINGLE_TRADING_SYMBOL[0]}. Run Cell 3.\")\n",
        "    raise SystemExit(f\"Sector mapping missing for {SINGLE_TRADING_SYMBOL[0]}\")\n",
        "if 'VIX_PROXY_TICKER' not in globals(): VIX_PROXY_TICKER = 'VIXY' # Fallback\n",
        "\n",
        "backtest_start_date = datetime(2023, 1, 1).date()\n",
        "# Let's test the problematic date specifically and a bit around it\n",
        "# backtest_start_date = datetime(2023, 6, 28).date()\n",
        "# backtest_end_date = datetime(2023, 7, 5).date()\n",
        "backtest_end_date = datetime(2023, 6, 30).date() # Keep as per your log for now\n",
        "backtest_timeframe_hourly = TimeFrame.Hour\n",
        "\n",
        "logger.info(\"--- TESTING WITH VIX THRESHOLD SET VERY HIGH TO ISOLATE VIX DATA ISSUE ---\")\n",
        "ml_strategy_instance_single_test = MLBreakoutStrategy(\n",
        "    symbols_list=SINGLE_TRADING_SYMBOL,\n",
        "    sector_etf_map=SECTOR_ETF_MAP,\n",
        "    vix_ticker=VIX_PROXY_TICKER,\n",
        "    api_key=ALPACA_API_KEY,\n",
        "    api_secret=ALPACA_API_SECRET,\n",
        "    initial_cash=100000.0,\n",
        "    # Using relaxed rules from Cell 6 __init__ default, but specifically overriding VIX threshold\n",
        "    vix_threshold_high_filter=150, # Temporarily set very high\n",
        "    # You can also adjust ml_optimal_threshold here if needed for testing signal flow\n",
        "    # For example, if the loaded one from file is too strict for a weak model:\n",
        "    # ml_threshold_path='your_threshold_file.pkl' # if you want to pass explicitly\n",
        ")\n",
        "# Manually set ml_optimal_threshold if not done in init or want to override further for testing\n",
        "# original_loaded_threshold = joblib.load('optimal_threshold_multi_optimized.pkl')\n",
        "# ml_strategy_instance_single_test.ml_optimal_threshold = max(0.25, original_loaded_threshold - 0.10)\n",
        "# logger.info(f\"Strategy ML threshold MANUALLY OVERRIDDEN for test to: {ml_strategy_instance_single_test.ml_optimal_threshold:.2f}\")\n",
        "\n",
        "\n",
        "if ml_strategy_instance_single_test.stock_data_client is None and 'stock_data_client' in globals() and stock_data_client is not None:\n",
        "    ml_strategy_instance_single_test.stock_data_client = stock_data_client\n",
        "    logger.info(\"Updated strategy instance with globally initialized Alpaca client for backtest.\")\n",
        "\n",
        "# Enable DEBUG logging for this specific test run\n",
        "# ml_strategy_instance_single_test.logger.setLevel(logging.DEBUG)\n",
        "# logging.getLogger().setLevel(logging.DEBUG) # Also ensure root logger is DEBUG for full output\n",
        "\n",
        "logger.info(f\"\\nStarting backtest for SINGLE SYMBOL: {', '.join(SINGLE_TRADING_SYMBOL)} from {backtest_start_date} to {backtest_end_date} with HIGH VIX THRESHOLD...\")\n",
        "backtest_results_single = None\n",
        "optimized_model_file = 'breakout_predictor_multi_optimized.pkl'\n",
        "if os.path.exists(optimized_model_file):\n",
        "    if ml_strategy_instance_single_test.ml_model is None:\n",
        "        logger.error(f\"ML Model was not loaded in strategy __init__. Check logs. Aborting backtest.\")\n",
        "    else:\n",
        "        backtest_results_single = ml_strategy_instance_single_test.run_backtest(\n",
        "            SINGLE_TRADING_SYMBOL,\n",
        "            backtest_start_date,\n",
        "            backtest_end_date,\n",
        "            backtest_timeframe_hourly\n",
        "        )\n",
        "else:\n",
        "    logger.error(f\"Optimized ML model file '{optimized_model_file}' not found. Train in Cell 5.\")\n",
        "\n",
        "# ... (rest of Cell 7 for plotting and trade log summary remains the same) ...\n",
        "if backtest_results_single and \"summary_metrics\" in backtest_results_single:\n",
        "    logger.info(f\"\\n--- Backtest Finished (Single Symbol: {SINGLE_TRADING_SYMBOL[0]}, High VIX Thresh) ---\")\n",
        "    portfolio_df_single = backtest_results_single.get(\"portfolio_history\")\n",
        "    if portfolio_df_single is not None and not portfolio_df_single.empty:\n",
        "        logger.info(\"\\nPlotting Portfolio Value...\")\n",
        "        portfolio_df_to_plot_single = portfolio_df_single.copy()\n",
        "        if 'timestamp' in portfolio_df_to_plot_single.columns:\n",
        "             portfolio_df_to_plot_single['timestamp'] = pd.to_datetime(portfolio_df_to_plot_single['timestamp'])\n",
        "             portfolio_df_to_plot_single = portfolio_df_to_plot_single.set_index('timestamp')\n",
        "        if isinstance(portfolio_df_to_plot_single.index, pd.DatetimeIndex):\n",
        "            plt.figure(figsize=(15,7))\n",
        "            portfolio_df_to_plot_single['portfolio_value'].plot(label=f'Portfolio Value ({SINGLE_TRADING_SYMBOL[0]})', color='purple')\n",
        "            plt.title(f'Portfolio Value ({SINGLE_TRADING_SYMBOL[0]}) - High VIX Thresh Test', fontsize=16)\n",
        "            plt.ylabel('Portfolio Value ($)', fontsize=12); plt.xlabel('Date', fontsize=12)\n",
        "            plt.legend(); plt.grid(True); plt.tight_layout(); plt.show()\n",
        "\n",
        "    trade_log_df_single = backtest_results_single.get(\"trade_log\")\n",
        "    if trade_log_df_single is not None and not trade_log_df_single.empty:\n",
        "        logger.info(f\"\\nTrade Log Summary (Total Trades: {len(trade_log_df_single)}):\")\n",
        "        print(trade_log_df_single)\n",
        "        csv_filename_single = f\"tradelog_ML_HighVIXThreshTest_{SINGLE_TRADING_SYMBOL[0]}_{backtest_start_date.strftime('%Y%m%d')}_{backtest_end_date.strftime('%Y%m%d')}.csv\"\n",
        "        try: trade_log_df_single.to_csv(csv_filename_single, index=False); logger.info(f\"\\nFull trade log saved to: {csv_filename_single}\")\n",
        "        except Exception as e_csv: logger.error(f\"Error saving trade log to CSV: {e_csv}\")\n",
        "    else: logger.info(\"Trade log is empty (no trades executed).\")\n",
        "else: logger.error(\"\\nBacktest (single symbol, high VIX thresh) failed or no results.\")\n",
        "\n",
        "logger.info(\"\\n--- Cell 7 (Single Symbol, High VIX Thresh Test) Execution Finished ---\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "i3sgpQBNPwGL",
        "outputId": "a7887e92-612e-4c91-c9ac-704e4c29c5f7"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:root:--- TESTING WITH VIX THRESHOLD SET VERY HIGH TO ISOLATE VIX DATA ISSUE ---\n",
            "INFO:MLBreakoutStrategy:Loaded ML optimal threshold: 0.42, Adjusted for strategy: 0.37\n",
            "INFO:MLBreakoutStrategy:ML model ('breakout_predictor_multi_optimized.pkl'), adjusted threshold, and feature list loaded successfully.\n",
            "INFO:MLBreakoutStrategy:Strategy: Alpaca client initialized.\n",
            "INFO:root:\n",
            "Starting backtest for SINGLE SYMBOL: GOOGL from 2023-01-01 to 2023-06-30 with HIGH VIX THRESHOLD...\n",
            "INFO:MLBreakoutStrategy:Starting backtest for GOOGL from 2023-01-01 to 2023-06-30 (1Hour).\n",
            "INFO:MLBreakoutStrategy:Fetching HOURLY data for: XLK, GOOGL from 2022-04-21 to 2023-06-30\n",
            "INFO:MLBreakoutStrategy:Fetching DAILY data for VIX Proxy: VIXY from 2022-03-22 to 2023-06-30\n",
            "INFO:MLBreakoutStrategy:Aligning data & creating master timeline...\n",
            "INFO:MLBreakoutStrategy:Master simulation timeline: 888 timestamps for 2023-01-01 to 2023-06-30.\n",
            "INFO:MLBreakoutStrategy:Starting main backtest loop over 888 timestamps...\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-01-03 09:00:00] PV: $100,000.00, MaxDD: 0.00%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-01-11 11:00:00] PV: $100,000.00, MaxDD: 0.00%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-01-20 13:00:00] PV: $100,000.00, MaxDD: 0.00%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-01-30 13:00:00] PV: $100,000.00, MaxDD: 0.00%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-02-07 13:00:00] PV: $100,000.00, MaxDD: 0.00%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-02-15 13:00:00] PV: $100,000.00, MaxDD: 0.00%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-02-24 15:00:00] PV: $100,000.00, MaxDD: 0.00%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-03-07 10:00:00] PV: $100,000.00, MaxDD: 0.00%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-03-15 11:00:00] PV: $100,000.00, MaxDD: 0.00%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-03-23 10:00:00] PV: $100,000.00, MaxDD: 0.00%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-03-31 11:00:00] PV: $100,000.00, MaxDD: 0.00%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-04-10 15:00:00] PV: $100,000.00, MaxDD: 0.00%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-04-19 10:00:00] PV: $100,000.00, MaxDD: 0.00%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-04-27 11:00:00] PV: $100,000.00, MaxDD: 0.00%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-05-05 12:00:00] PV: $100,000.00, MaxDD: 0.00%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-05-15 12:00:00] PV: $100,000.00, MaxDD: 0.00%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:[GOOGL] BASE RULES MET! Consulting ML...\n",
            "INFO:MLBreakoutStrategy:[GOOGL] ML Prob Success: 0.4684 (Adjusted Threshold: 0.37)\n",
            "INFO:MLBreakoutStrategy:!!!!!! [GOOGL] ML CONFIRMS BUY !!!!!!\n",
            "INFO:MLBreakoutStrategy:[BACKTEST @ 2023-05-19 09:00:00] BOUGHT 490 GOOGL @ $123.08. SL: $121.04. Cash: $39690.80\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-05-23 14:00:00] PV: $99,524.70, MaxDD: 1.67%, Pos: [GOOGL(490)]\n",
            "INFO:MLBreakoutStrategy:[GOOGL @ 2023-05-24 09:00:00] STOP LOSS. Price 120.65 <= SL 121.04\n",
            "INFO:MLBreakoutStrategy:[BACKTEST @ 2023-05-24 09:00:00] STOP LOSS GOOGL: Sold 490 @ $120.65. Entry: $123.08. P&L: $-1190.70. Cash: $98809.30\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-06-02 09:00:00] PV: $98,809.30, MaxDD: 2.38%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:[GOOGL] BASE RULES MET! Consulting ML...\n",
            "INFO:MLBreakoutStrategy:[GOOGL] ML Prob Success: 0.5138 (Adjusted Threshold: 0.37)\n",
            "INFO:MLBreakoutStrategy:!!!!!! [GOOGL] ML CONFIRMS BUY !!!!!!\n",
            "INFO:MLBreakoutStrategy:[BACKTEST @ 2023-06-05 10:00:00] BOUGHT 537 GOOGL @ $126.06. SL: $124.22. Cash: $31115.08\n",
            "INFO:MLBreakoutStrategy:[GOOGL @ 2023-06-07 10:00:00] STOP LOSS. Price 123.72 <= SL 124.22\n",
            "INFO:MLBreakoutStrategy:[BACKTEST @ 2023-06-07 10:00:00] STOP LOSS GOOGL: Sold 537 @ $123.72. Entry: $126.06. P&L: $-1256.58. Cash: $97552.72\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-06-12 11:00:00] PV: $97,552.72, MaxDD: 3.62%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-06-21 13:00:00] PV: $97,552.72, MaxDD: 3.62%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-06-29 15:00:00] PV: $97,552.72, MaxDD: 3.62%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:[SIM PROGRESS @ 2023-06-30 15:00:00] PV: $97,552.72, MaxDD: 3.62%, Pos: [None]\n",
            "INFO:MLBreakoutStrategy:Main backtest simulation loop finished.\n",
            "INFO:MLBreakoutStrategy:Liquidating any open positions...\n",
            "INFO:MLBreakoutStrategy:\n",
            "========================= BACKTEST SUMMARY (ML Strategy) =========================\n",
            "Backtest Period Start              : 2023-01-01\n",
            "Backtest Period End                : 2023-06-30\n",
            "Initial Portfolio Value            : $100,000.00\n",
            "Final Portfolio Value              : $97,552.72\n",
            "Total Net P&L                      : $-2,447.28\n",
            "Total Return (%)                   : -2.45%\n",
            "Max Drawdown (%)                   : 3.62%\n",
            "Total Entry Signals                : 2\n",
            "Total Closed Trades                : 2\n",
            "Winning Trades                     : 0\n",
            "Losing Trades                      : 2\n",
            "Win Rate (Closed Trades, %)        : 0.00%\n",
            "Average P&L per Closed Trade       : $-1,223.64\n",
            "Average Profit per Winning Trade   : $0.00\n",
            "Average Loss per Losing Trade      : $-1,223.64\n",
            "Profit Factor                      : 0.00\n",
            "======================================================================\n",
            "INFO:root:\n",
            "--- Backtest Finished (Single Symbol: GOOGL, High VIX Thresh) ---\n",
            "INFO:root:\n",
            "Plotting Portfolio Value...\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:root:\n",
            "Trade Log Summary (Total Trades: 2):\n",
            "INFO:root:\n",
            "Full trade log saved to: tradelog_ML_HighVIXThreshTest_GOOGL_20230101_20230630.csv\n",
            "INFO:root:\n",
            "--- Cell 7 (Single Symbol, High VIX Thresh Test) Execution Finished ---\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   trade_id           timestamp_entry symbol type  shares  price_entry  \\\n",
            "0         1 2023-05-19 09:00:00-04:00  GOOGL  BUY     490       123.08   \n",
            "1         2 2023-06-05 10:00:00-04:00  GOOGL  BUY     537       126.06   \n",
            "\n",
            "   initial_stop_price  status            timestamp_exit  price_exit      pnl  \\\n",
            "0              121.04  CLOSED 2023-05-24 09:00:00-04:00      120.65 -1190.70   \n",
            "1              124.22  CLOSED 2023-06-07 10:00:00-04:00      123.72 -1256.58   \n",
            "\n",
            "  reason_exit  \n",
            "0   STOP LOSS  \n",
            "1   STOP LOSS  \n"
          ]
        }
      ]
    }
  ]
}